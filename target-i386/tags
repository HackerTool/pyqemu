B	ops_sse.h	/^#define B(n) MMX_B(n)$/
B	ops_sse.h	/^#define B(n) XMM_B(n)$/
BIASEXPONENT	exec.h	/^#define BIASEXPONENT(fp) fp.l.upper = (fp.l.upper /
BIASEXPONENT	exec.h	/^#define BIASEXPONENT(fp) fp.l.upper = (fp.l.upper /
BUGGY_64	translate.c	/^#define BUGGY_64(x) NULL$/
CODE64	translate.c	/^#define CODE64(s) ((s)->code64)$/
CODE64	translate.c	/^#define CODE64(s) 0$/
DEF_HELPER_2	ops_sse_header.h	/^DEF_HELPER_2(glue(psrlw, SUFFIX), void, Reg, Reg)$/
DEF_HELPER_FLAGS_1	helper.h	/^DEF_HELPER_FLAGS_1(cc_compute_all, TCG_CALL_PURE, /
DPRINTF	kvm.c	/^#define DPRINTF(fmt, ...) \\$/
DPRINTF	kvm.c	/^#define DPRINTF(fmt, ...) \\$/
EXPD	exec.h	/^#define EXPD(fp)	(fp.l.upper & 0x7fff)$/
EXPD	exec.h	/^#define EXPD(fp)	(((fp.l.upper) >> 20) & 0x7FF)$/
EXPD1	machine.c	/^#define EXPD1(fp)	((fp >> 52) & 0x7FF)$/
FABSB	ops_sse.h	/^#define FABSB(_, x) x > INT8_MAX  ? -(int8_t ) x :/
FABSL	ops_sse.h	/^#define FABSL(_, x) x > INT32_MAX ? -(int32_t) x :/
FABSW	ops_sse.h	/^#define FABSW(_, x) x > INT16_MAX ? -(int16_t) x :/
FADD	ops_sse.h	/^#define FADD(a, b) ((a) + (b))$/
FADDSB	ops_sse.h	/^#define FADDSB(a, b) satsb((int8_t)(a) + (int8_t)(/
FADDSW	ops_sse.h	/^#define FADDSW(a, b) satsw((int16_t)(a) + (int16_t/
FADDUB	ops_sse.h	/^#define FADDUB(a, b) satub((a) + (b))$/
FADDUW	ops_sse.h	/^#define FADDUW(a, b) satuw((a) + (b))$/
FAND	ops_sse.h	/^#define FAND(a, b) (a) & (b)$/
FANDN	ops_sse.h	/^#define FANDN(a, b) ((~(a)) & (b))$/
FAVG	ops_sse.h	/^#define FAVG(a, b) ((a) + (b) + 1) >> 1$/
FBLENDP	ops_sse.h	/^#define FBLENDP(d, s, m) m ? s : d$/
FBLENDVB	ops_sse.h	/^#define FBLENDVB(d, s, m) (m & 0x80) ? s : d$/
FBLENDVPD	ops_sse.h	/^#define FBLENDVPD(d, s, m) (m & 0x8000000000000000/
FBLENDVPS	ops_sse.h	/^#define FBLENDVPS(d, s, m) (m & 0x80000000) ? s : /
FCMPEQ	ops_sse.h	/^#define FCMPEQ(a, b) (a) == (b) ? -1 : 0$/
FCMPEQQ	ops_sse.h	/^#define FCMPEQQ(d, s) d == s ? -1 : 0$/
FCMPGTB	ops_sse.h	/^#define FCMPGTB(a, b) (int8_t)(a) > (int8_t)(b) ? /
FCMPGTL	ops_sse.h	/^#define FCMPGTL(a, b) (int32_t)(a) > (int32_t)(b) /
FCMPGTQ	ops_sse.h	/^#define FCMPGTQ(d, s) d > s ? -1 : 0$/
FCMPGTW	ops_sse.h	/^#define FCMPGTW(a, b) (int16_t)(a) > (int16_t)(b) /
FLX_BBLTRANSLATE_HOOK	flx_bbltranslate.h	/^#define FLX_BBLTRANSLATE_HOOK(function) do{if(flx_/
FLX_MODULE	flx_module.h	/^#define FLX_MODULE(name, ...) {name, {__VA_ARGS__,/
FLX_MODULE_CONSTRUCTOR	flx_custommodule.h	/^FLX_MODULE_CONSTRUCTOR("custommodule")$/
FLX_TEST_CONDITION	flx_hooking.h	/^#define FLX_TEST_CONDITION(conditions, code, condi/
FLX_TEST_CONDITIONS	flx_hooking.h	/^#define FLX_TEST_CONDITIONS(conditions) if(!FLX_TE/
FLX_TEST_CONDITION_BBLTRACE	flx_hooking.h	/^#define FLX_TEST_CONDITION_BBLTRACE(conditions)   /
FLX_TEST_CONDITION_CABALLERO	flx_hooking.h	/^#define FLX_TEST_CONDITION_CABALLERO(conditions)  /
FLX_TEST_CONDITION_CALL_ACTIVE	flx_hooking.h	/^#define FLX_TEST_CONDITION_CALL_ACTIVE(conditions)/
FLX_TEST_CONDITION_FILTERED	flx_hooking.h	/^#define FLX_TEST_CONDITION_FILTERED(conditions)   /
FLX_TEST_CONDITION_GLOBAL_ACTIVE	flx_hooking.h	/^#define FLX_TEST_CONDITION_GLOBAL_ACTIVE(condition/
FLX_TEST_CONDITION_JMP_ACTIVE	flx_hooking.h	/^#define FLX_TEST_CONDITION_JMP_ACTIVE(conditions) /
FLX_TEST_CONDITION_MEMTRACE	flx_hooking.h	/^#define FLX_TEST_CONDITION_MEMTRACE(conditions)   /
FLX_TEST_CONDITION_RET_ACTIVE	flx_hooking.h	/^#define FLX_TEST_CONDITION_RET_ACTIVE(conditions) /
FLX_TEST_CONDITION_SYSCALL_ACTIVE	flx_hooking.h	/^#define FLX_TEST_CONDITION_SYSCALL_ACTIVE(conditio/
FLX_TEST_CONDITION_USERSPACE	flx_hooking.h	/^#define FLX_TEST_CONDITION_USERSPACE(conditions)  /
FMAXSB	ops_sse.h	/^#define FMAXSB(d, s) MAX((int8_t) d, (int8_t) s)$/
FMAXSD	ops_sse.h	/^#define FMAXSD(d, s) MAX((int32_t) d, (int32_t) s)/
FMAXSW	ops_sse.h	/^#define FMAXSW(a, b) ((int16_t)(a) > (int16_t)(b))/
FMAXUB	ops_sse.h	/^#define FMAXUB(a, b) ((a) > (b)) ? (a) : (b)$/
FMINSB	ops_sse.h	/^#define FMINSB(d, s) MIN((int8_t) d, (int8_t) s)$/
FMINSD	ops_sse.h	/^#define FMINSD(d, s) MIN((int32_t) d, (int32_t) s)/
FMINSW	ops_sse.h	/^#define FMINSW(a, b) ((int16_t)(a) < (int16_t)(b))/
FMINUB	ops_sse.h	/^#define FMINUB(a, b) ((a) < (b)) ? (a) : (b)$/
FMULHRSW	ops_sse.h	/^#define FMULHRSW(d, s) ((int16_t) d * (int16_t) s /
FMULHRW	ops_sse.h	/^#define FMULHRW(a, b) ((int16_t)(a) * (int16_t)(b)/
FMULHUW	ops_sse.h	/^#define FMULHUW(a, b) (a) * (b) >> 16$/
FMULHW	ops_sse.h	/^#define FMULHW(a, b) (int16_t)(a) * (int16_t)(b) >/
FMULLD	ops_sse.h	/^#define FMULLD(d, s) (int32_t) d * (int32_t) s$/
FMULLW	ops_sse.h	/^#define FMULLW(a, b) (a) * (b)$/
FOR	ops_sse.h	/^#define FOR(a, b) (a) | (b)$/
FPU_ADD	ops_sse.h	/^#define FPU_ADD(size, a, b) float ## size ## _add(/
FPU_CMPEQ	ops_sse.h	/^#define FPU_CMPEQ(size, a, b) float ## size ## _eq/
FPU_CMPLE	ops_sse.h	/^#define FPU_CMPLE(size, a, b) float ## size ## _le/
FPU_CMPLT	ops_sse.h	/^#define FPU_CMPLT(size, a, b) float ## size ## _lt/
FPU_CMPNEQ	ops_sse.h	/^#define FPU_CMPNEQ(size, a, b) float ## size ## _e/
FPU_CMPNLE	ops_sse.h	/^#define FPU_CMPNLE(size, a, b) float ## size ## _l/
FPU_CMPNLT	ops_sse.h	/^#define FPU_CMPNLT(size, a, b) float ## size ## _l/
FPU_CMPORD	ops_sse.h	/^#define FPU_CMPORD(size, a, b) float ## size ## _u/
FPU_CMPUNORD	ops_sse.h	/^#define FPU_CMPUNORD(size, a, b) float ## size ## /
FPU_DIV	ops_sse.h	/^#define FPU_DIV(size, a, b) float ## size ## _div(/
FPU_MAX	ops_sse.h	/^#define FPU_MAX(size, a, b) (a) > (b) ? (a) : (b)$/
FPU_MIN	ops_sse.h	/^#define FPU_MIN(size, a, b) (a) < (b) ? (a) : (b)$/
FPU_MUL	ops_sse.h	/^#define FPU_MUL(size, a, b) float ## size ## _mul(/
FPU_SQRT	ops_sse.h	/^#define FPU_SQRT(size, a, b) float ## size ## _sqr/
FPU_SUB	ops_sse.h	/^#define FPU_SUB(size, a, b) float ## size ## _sub(/
FSIGNB	ops_sse.h	/^#define FSIGNB(d, s) s <= INT8_MAX  ? s ? d : 0 : /
FSIGNL	ops_sse.h	/^#define FSIGNL(d, s) s <= INT32_MAX ? s ? d : 0 : /
FSIGNW	ops_sse.h	/^#define FSIGNW(d, s) s <= INT16_MAX ? s ? d : 0 : /
FSUB	ops_sse.h	/^#define FSUB(a, b) ((a) - (b))$/
FSUBSB	ops_sse.h	/^#define FSUBSB(a, b) satsb((int8_t)(a) - (int8_t)(/
FSUBSW	ops_sse.h	/^#define FSUBSW(a, b) satsw((int16_t)(a) - (int16_t/
FSUBUB	ops_sse.h	/^#define FSUBUB(a, b) satub((a) - (b))$/
FSUBUW	ops_sse.h	/^#define FSUBUW(a, b) satuw((a) - (b))$/
FXOR	ops_sse.h	/^#define FXOR(a, b) (a) ^ (b)$/
GEN_REPZ	translate.c	/^#define GEN_REPZ(op)                              /
GEN_REPZ	translate.c	/^GEN_REPZ(movs)$/
GEN_REPZ2	translate.c	/^#define GEN_REPZ2(op)                             /
L	ops_sse.h	/^#define L(n) MMX_L(n)$/
L	ops_sse.h	/^#define L(n) XMM_L(n)$/
LOG_PCALL	op_helper.c	/^#  define LOG_PCALL(...) qemu_log_mask(CPU_LOG_PCA/
LOG_PCALL	op_helper.c	/^#  define LOG_PCALL(...) do { } while (0)$/
LOG_PCALL_STATE	op_helper.c	/^#  define LOG_PCALL_STATE(env) \\$/
LOG_PCALL_STATE	op_helper.c	/^#  define LOG_PCALL_STATE(env) do { } while (0)$/
MANTD	exec.h	/^#define MANTD(fp)       (fp.l.lower)$/
MANTD	exec.h	/^#define MANTD(fp)	(fp.l.lower | ((uint64_t)(fp.l.u/
MANTD	exec.h	/^#define MANTD(fp)	(fp.ll & ((1LL << 52) - 1))$/
MANTD1	machine.c	/^#define MANTD1(fp)	(fp & ((1LL << 52) - 1))$/
MMX_B	cpu.h	/^#define MMX_B(n) _b[7 - (n)]$/
MMX_B	cpu.h	/^#define MMX_B(n) _b[n]$/
MMX_L	cpu.h	/^#define MMX_L(n) _l[1 - (n)]$/
MMX_L	cpu.h	/^#define MMX_L(n) _l[n]$/
MMX_OP2	translate.c	/^#define MMX_OP2(x) { gen_helper_ ## x ## _mmx, gen/
MMX_Q	cpu.h	/^#define MMX_Q(n) q$/
MMX_S	cpu.h	/^#define MMX_S(n) _s[1 - (n)]$/
MMX_S	cpu.h	/^#define MMX_S(n) _s[n]$/
MMX_W	cpu.h	/^#define MMX_W(n) _w[3 - (n)]$/
MMX_W	cpu.h	/^#define MMX_W(n) _w[n]$/
MSR_MTRRphysBase	cpu.h	/^#define MSR_MTRRphysBase(reg)		(0x200 + 2 * (reg))/
MSR_MTRRphysMask	cpu.h	/^#define MSR_MTRRphysMask(reg)		(0x200 + 2 * (reg) /
Mflx_filter	flx_filter.c	/^int main(int argc, char* argv[]){$/
Mflx_shadowmem	flx_shadowmem.c	/^int main(void){$/
POPCOUNT	ops_sse.h	/^#define POPCOUNT(n, i) (n & POPMASK(i)) + ((n >> (/
POPL	op_helper.c	/^#define POPL(ssp, sp, sp_mask, val)\\$/
POPMASK	ops_sse.h	/^#define POPMASK(i)     ((target_ulong) -1 \/ ((1LL /
POPQ	op_helper.c	/^#define POPQ(sp, val)\\$/
POPW	op_helper.c	/^#define POPW(ssp, sp, sp_mask, val)\\$/
PUSHL	op_helper.c	/^#define PUSHL(ssp, sp, sp_mask, val)\\$/
PUSHQ	op_helper.c	/^#define PUSHQ(sp, val)\\$/
PUSHW	op_helper.c	/^#define PUSHW(ssp, sp, sp_mask, val)\\$/
PyFlxC_arithwindow_disable	flx_instrument.c	/^static PyObject* PyFlxC_arithwindow_disable(PyObje/
PyFlxC_arithwindow_enable	flx_instrument.c	/^static PyObject* PyFlxC_arithwindow_enable(PyObjec/
PyFlxC_bbltrace_disable	flx_instrument.c	/^static PyObject* PyFlxC_bbltrace_disable(PyObject /
PyFlxC_bbltrace_enable	flx_instrument.c	/^static PyObject* PyFlxC_bbltrace_enable(PyObject */
PyFlxC_breakpoint_delete	flx_instrument.c	/^static PyObject* PyFlxC_breakpoint_delete(PyObject/
PyFlxC_breakpoint_insert	flx_instrument.c	/^static PyObject* PyFlxC_breakpoint_insert(PyObject/
PyFlxC_caballero_disable	flx_instrument.c	/^static PyObject* PyFlxC_caballero_disable(PyObject/
PyFlxC_caballero_enable	flx_instrument.c	/^static PyObject* PyFlxC_caballero_enable(PyObject /
PyFlxC_constsearch_disable	flx_instrument.c	/^static PyObject* PyFlxC_constsearch_disable(PyObje/
PyFlxC_constsearch_enable	flx_instrument.c	/^static PyObject* PyFlxC_constsearch_enable(PyObjec/
PyFlxC_constsearch_pattern	flx_instrument.c	/^static PyObject* PyFlxC_constsearch_pattern(PyObje/
PyFlxC_creg	flx_instrument.c	/^static PyObject* PyFlxC_creg(PyObject *self, PyObj/
PyFlxC_eip	flx_instrument.c	/^static PyObject* PyFlxC_eip(PyObject *self, PyObje/
PyFlxC_filter_add	flx_instrument.c	/^static PyObject* PyFlxC_filter_add(PyObject *self,/
PyFlxC_filter_del	flx_instrument.c	/^static PyObject* PyFlxC_filter_del(PyObject *self,/
PyFlxC_filter_disable	flx_instrument.c	/^static PyObject* PyFlxC_filter_disable(PyObject *s/
PyFlxC_filter_enable	flx_instrument.c	/^static PyObject* PyFlxC_filter_enable(PyObject *se/
PyFlxC_filter_filtered	flx_instrument.c	/^static PyObject* PyFlxC_filter_filtered(PyObject */
PyFlxC_functionentropy_disable	flx_instrument.c	/^static PyObject* PyFlxC_functionentropy_disable(Py/
PyFlxC_functionentropy_enable	flx_instrument.c	/^static PyObject* PyFlxC_functionentropy_enable(PyO/
PyFlxC_functiontrace_disable	flx_instrument.c	/^static PyObject* PyFlxC_functiontrace_disable(PyOb/
PyFlxC_functiontrace_enable	flx_instrument.c	/^static PyObject* PyFlxC_functiontrace_enable(PyObj/
PyFlxC_genreg	flx_instrument.c	/^static PyObject* PyFlxC_genreg(PyObject *self, PyO/
PyFlxC_memtrace_disable	flx_instrument.c	/^static PyObject* PyFlxC_memtrace_disable(PyObject /
PyFlxC_memtrace_enable	flx_instrument.c	/^static PyObject* PyFlxC_memtrace_enable(PyObject */
PyFlxC_registers	flx_instrument.c	/^static PyObject* PyFlxC_registers(PyObject *self, /
PyFlxC_retranslate	flx_instrument.c	/^static PyObject* PyFlxC_retranslate(PyObject *self/
PyFlxC_set_context	flx_instrument.c	/^static PyObject* PyFlxC_set_context(PyObject *self/
PyFlxC_set_instrumentation_active	flx_instrument.c	/^static PyObject* PyFlxC_set_instrumentation_active/
PyFlxC_vmem_read	flx_instrument.c	/^static PyObject* PyFlxC_vmem_read(PyObject *self, /
Q	ops_sse.h	/^#define Q(n) q$/
Q	ops_sse.h	/^#define Q(n) XMM_Q(n)$/
Qemu	PyQEMU.py	/^class Qemu:$/
QemuFlxLogger	PyQEMU.py	/^class QemuFlxLogger:$/
REX_B	translate.c	/^#define REX_B(s) ((s)->rex_b)$/
REX_B	translate.c	/^#define REX_B(s) 0$/
REX_X	translate.c	/^#define REX_X(s) ((s)->rex_x)$/
REX_X	translate.c	/^#define REX_X(s) 0$/
SEG_ADDL	op_helper.c	/^#define SEG_ADDL(ssp, sp, sp_mask) ((uint32_t)((ss/
SET_ESP	op_helper.c	/^#define SET_ESP(val, sp_mask)\\$/
SET_ESP	op_helper.c	/^#define SET_ESP(val, sp_mask) ESP = (ESP & ~(sp_ma/
SHR	ops_sse.h	/^#define SHR(v, i) (i < 64 && i > -64 ? i > 0 ? v >/
SIGND	exec.h	/^#define SIGND(fp)	((fp.l.upper) & 0x8000)$/
SIGND	exec.h	/^#define SIGND(fp)	((fp.l.upper) & 0x80000000)$/
SIGND1	machine.c	/^#define SIGND1(fp)	((fp >> 32) & 0x80000000)$/
SSE41_OP	translate.c	/^#define SSE41_OP(x) { { NULL, gen_helper_ ## x ## /
SSE42_OP	translate.c	/^#define SSE42_OP(x) { { NULL, gen_helper_ ## x ## /
SSE_FOP	translate.c	/^#define SSE_FOP(x) { gen_helper_ ## x ## ps, gen_h/
SSE_HELPER_B	ops_sse.h	/^#define SSE_HELPER_B(name, F)\\$/
SSE_HELPER_B	ops_sse.h	/^SSE_HELPER_B(helper_paddb, FADD)$/
SSE_HELPER_B	ops_sse.h	/^SSE_HELPER_B(helper_pabsb, FABSB)$/
SSE_HELPER_B	ops_sse.h	/^SSE_HELPER_B(helper_pminsb, FMINSB)$/
SSE_HELPER_B	ops_sse_header.h	/^#define SSE_HELPER_B(name, F)\\$/
SSE_HELPER_CMP	ops_sse.h	/^#define SSE_HELPER_CMP(name, F)\\$/
SSE_HELPER_CMP	ops_sse.h	/^SSE_HELPER_CMP(cmpeq, FPU_CMPEQ)$/
SSE_HELPER_CMP	ops_sse_header.h	/^#define SSE_HELPER_CMP(name, F)\\$/
SSE_HELPER_F	ops_sse.h	/^#define SSE_HELPER_F(name, elem, num, F)\\$/
SSE_HELPER_F	ops_sse.h	/^SSE_HELPER_F(helper_pmovsxbw, W, 8, (int8_t) s->B)/
SSE_HELPER_I	ops_sse.h	/^#define SSE_HELPER_I(name, elem, num, F)\\$/
SSE_HELPER_I	ops_sse.h	/^SSE_HELPER_I(helper_blendps, L, 4, FBLENDP)$/
SSE_HELPER_L	ops_sse.h	/^#define SSE_HELPER_L(name, F)\\$/
SSE_HELPER_L	ops_sse_header.h	/^#define SSE_HELPER_L(name, F)\\$/
SSE_HELPER_Q	ops_sse.h	/^#define SSE_HELPER_Q(name, F)\\$/
SSE_HELPER_Q	ops_sse.h	/^SSE_HELPER_Q(helper_pcmpeqq, FCMPEQQ)$/
SSE_HELPER_Q	ops_sse.h	/^SSE_HELPER_Q(helper_pcmpgtq, FCMPGTQ)$/
SSE_HELPER_Q	ops_sse_header.h	/^#define SSE_HELPER_Q(name, F)\\$/
SSE_HELPER_S	ops_sse.h	/^#define SSE_HELPER_S(name, F)\\$/
SSE_HELPER_S	ops_sse.h	/^SSE_HELPER_S(add, FPU_ADD)$/
SSE_HELPER_S	ops_sse_header.h	/^#define SSE_HELPER_S(name, F)\\$/
SSE_HELPER_V	ops_sse.h	/^#define SSE_HELPER_V(name, elem, num, F)\\$/
SSE_HELPER_V	ops_sse.h	/^SSE_HELPER_V(helper_pblendvb, B, 16, FBLENDVB)$/
SSE_HELPER_W	ops_sse.h	/^#define SSE_HELPER_W(name, F)\\$/
SSE_HELPER_W	ops_sse_header.h	/^#define SSE_HELPER_W(name, F)\\$/
SSSE3_OP	translate.c	/^#define SSSE3_OP(x) { MMX_OP2(x), CPUID_EXT_SSSE3 /
ST	exec.h	/^#define ST(n)  (env->fpregs[(env->fpstt + (n)) & 7/
UNPCK_OP	ops_sse.h	/^#define UNPCK_OP(base_name, base)                 /
UNPCK_OP	ops_sse.h	/^UNPCK_OP(l, 0)$/
UNPCK_OP	ops_sse_header.h	/^#define UNPCK_OP(base_name, base)                 /
VMSTATE_FP_REGS	machine.c	/^#define VMSTATE_FP_REGS(_field, _state, _n)       /
VMSTATE_FP_REGS	machine.c	/^#define VMSTATE_FP_REGS(_field, _state, _n)       /
VMSTATE_HACK_UINT32	machine.c	/^#define VMSTATE_HACK_UINT32(_f, _s, _t)           /
VMSTATE_MTRR_VARS	machine.c	/^#define VMSTATE_MTRR_VARS(_field, _state, _n, _v) /
VMSTATE_SEGMENT	machine.c	/^#define VMSTATE_SEGMENT(_field, _state) {         /
VMSTATE_SEGMENT_ARRAY	machine.c	/^#define VMSTATE_SEGMENT_ARRAY(_field, _state, _n) /
VMSTATE_XMM_REGS	machine.c	/^#define VMSTATE_XMM_REGS(_field, _state, _n)      /
VMSTATE_YMMH_REGS_VARS	machine.c	/^#define VMSTATE_YMMH_REGS_VARS(_field, _state, _n,/
VirtualMachine	PyQEMU.py	/^class VirtualMachine:$/
W	ops_sse.h	/^#define W(n) MMX_W(n)$/
W	ops_sse.h	/^#define W(n) XMM_W(n)$/
X86_64_DEF	translate.c	/^#define X86_64_DEF(...)  __VA_ARGS__$/
X86_64_DEF	translate.c	/^#define X86_64_DEF(...)$/
X86_64_ONLY	translate.c	/^#define X86_64_ONLY(x) x$/
X86_64_ONLY	translate.c	/^#define X86_64_ONLY(x) NULL$/
XMM_B	cpu.h	/^#define XMM_B(n) _b[15 - (n)]$/
XMM_B	cpu.h	/^#define XMM_B(n) _b[n]$/
XMM_D	cpu.h	/^#define XMM_D(n) _d[1 - (n)]$/
XMM_D	cpu.h	/^#define XMM_D(n) _d[n]$/
XMM_L	cpu.h	/^#define XMM_L(n) _l[3 - (n)]$/
XMM_L	cpu.h	/^#define XMM_L(n) _l[n]$/
XMM_ONLY	ops_sse.h	/^#define XMM_ONLY(...)$/
XMM_ONLY	ops_sse.h	/^#define XMM_ONLY(...) __VA_ARGS__$/
XMM_Q	cpu.h	/^#define XMM_Q(n) _q[1 - (n)]$/
XMM_Q	cpu.h	/^#define XMM_Q(n) _q[n]$/
XMM_S	cpu.h	/^#define XMM_S(n) _s[3 - (n)]$/
XMM_S	cpu.h	/^#define XMM_S(n) _s[n]$/
XMM_W	cpu.h	/^#define XMM_W(n) _w[7 - (n)]$/
XMM_W	cpu.h	/^#define XMM_W(n) _w[n]$/
__del__	PyQEMU.py	/^	def __del__(self):$/
__init__	PyQEMU.py	/^	def __init__(self, config):$/
__init__	PyQEMU.py	/^	def __init__(self):$/
__init__	PyQEMU.py	/^	def __init__(self, configfile):$/
abs1	ops_sse.h	/^static inline int abs1(int a)$/
add128	op_helper.c	/^static void add128(uint64_t *plow, uint64_t *phigh/
add_flagname_to_bitmaps	cpuid.c	/^static void add_flagname_to_bitmaps(const char *fl/
allocated	PyQEMU.py.bak	/^	def allocated(self, address):$/
altcmp	cpuid.c	/^static int altcmp(const char *s, const char *e, co/
approx_rcp	op_helper.c	/^static float approx_rcp(float a)$/
approx_rsqrt	op_helper.c	/^static float approx_rsqrt(float a)$/
avl_bbl_cmp	flx_bbl.c	/^int avl_bbl_cmp(const flx_bbl* a, const flx_bbl* b/
avl_bbl_free	flx_bbl.c	/^void avl_bbl_free(void* item){$/
avl_breakpoint_cmp	flx_breakpoint.c	/^static int avl_breakpoint_cmp(const flx_breakpoint/
avl_breakpoint_free	flx_breakpoint.c	/^static void avl_breakpoint_free(flx_breakpoint *bp/
avl_context_cmp	flx_context.c	/^avl_context_cmp(const flx_context* a, const flx_co/
avl_context_free	flx_context.c	/^avl_context_free(flx_context* c){$/
avl_page_cmp	flx_filter.c	/^int avl_page_cmp(const uint16_t* a, const uint16_t/
avl_page_free	flx_filter.c	/^void avl_page_free(void* item){$/
avl_process_cmp	flx_breakpoint.c	/^static int avl_process_cmp(const uint32_t *a, cons/
avl_process_free	flx_breakpoint.c	/^static void avl_process_free(void *item){$/
avl_process_tb_cmp	flx_tbrestoring.c	/^static int avl_process_tb_cmp(const flx_process_tb/
avl_process_tb_free	flx_tbrestoring.c	/^static void avl_process_tb_free(flx_process_tb* tb/
breakpoint_handler	helper.c	/^static void breakpoint_handler(CPUState *env)$/
buildLogfile	PyQEMU.py	/^	def buildLogfile(self, process):$/
check_exception	op_helper.c	/^static int check_exception(int intno, int *error_c/
check_features_against_host	cpuid.c	/^static int check_features_against_host(x86_def_t */
check_hw_breakpoints	helper.c	/^int check_hw_breakpoints(CPUState *env, int force_/
check_io	op_helper.c	/^static inline void check_io(int addr, int size)$/
closeAll	PyQEMU.py	/^	def closeAll(self):$/
compute_all_eflags	op_helper.c	/^static int compute_all_eflags(void)$/
compute_c_eflags	op_helper.c	/^static int compute_c_eflags(void)$/
compute_eflags	exec.h	/^static inline uint32_t compute_eflags(void)$/
cpu_clear_apic_feature	cpuid.c	/^void cpu_clear_apic_feature(CPUX86State *env)$/
cpu_clone_regs	cpu.h	/^static inline void cpu_clone_regs(CPUState *env, t/
cpu_dump_state	helper.c	/^void cpu_dump_state(CPUState *env, FILE *f,$/
cpu_get_fp80	op_helper.c	/^void cpu_get_fp80(uint64_t *pmant, uint16_t *pexp,/
cpu_get_fp80	op_helper.c	/^void cpu_get_fp80(uint64_t *pmant, uint16_t *pexp,/
cpu_get_phys_page_debug	helper.c	/^target_phys_addr_t cpu_get_phys_page_debug(CPUStat/
cpu_get_tb_cpu_state	cpu.h	/^static inline void cpu_get_tb_cpu_state(CPUState */
cpu_halted	exec.h	/^static inline int cpu_halted(CPUState *env) {$/
cpu_has_work	exec.h	/^static inline int cpu_has_work(CPUState *env)$/
cpu_inject_x86_mce	helper.c	/^void cpu_inject_x86_mce(CPUState *cenv, int bank, /
cpu_load	machine.c	/^int cpu_load(QEMUFile *f, void *opaque, int versio/
cpu_load_efer	exec.h	/^static inline void cpu_load_efer(CPUState *env, ui/
cpu_mmu_index	cpu.h	/^static inline int cpu_mmu_index (CPUState *env)$/
cpu_pc_from_tb	exec.h	/^static inline void cpu_pc_from_tb(CPUState *env, T/
cpu_post_load	machine.c	/^static int cpu_post_load(void *opaque, int version/
cpu_pre_save	machine.c	/^static void cpu_pre_save(void *opaque)$/
cpu_reset	helper.c	/^void cpu_reset(CPUX86State *env)$/
cpu_save	machine.c	/^void cpu_save(QEMUFile *f, void *opaque)$/
cpu_set_fp80	op_helper.c	/^CPU86_LDouble cpu_set_fp80(uint64_t mant, uint16_t/
cpu_set_fp80	op_helper.c	/^CPU86_LDouble cpu_set_fp80(uint64_t mant, uint16_t/
cpu_x86_close	helper.c	/^void cpu_x86_close(CPUX86State *env)$/
cpu_x86_cpuid	cpuid.c	/^void cpu_x86_cpuid(CPUX86State *env, uint32_t inde/
cpu_x86_dump_seg_cache	helper.c	/^cpu_x86_dump_seg_cache(CPUState *env, FILE *f,$/
cpu_x86_fill_host	cpuid.c	/^static int cpu_x86_fill_host(x86_def_t *x86_cpu_de/
cpu_x86_fill_model_id	cpuid.c	/^static int cpu_x86_fill_model_id(char *str)$/
cpu_x86_find_by_name	cpuid.c	/^static int cpu_x86_find_by_name(x86_def_t *x86_cpu/
cpu_x86_get_descr_debug	helper.c	/^int cpu_x86_get_descr_debug(CPUX86State *env, unsi/
cpu_x86_handle_mmu_fault	helper.c	/^int cpu_x86_handle_mmu_fault(CPUX86State *env, tar/
cpu_x86_handle_mmu_fault	helper.c	/^int cpu_x86_handle_mmu_fault(CPUX86State *env, tar/
cpu_x86_init	helper.c	/^CPUX86State *cpu_x86_init(const char *cpu_model)$/
cpu_x86_load_seg_cache	cpu.h	/^static inline void cpu_x86_load_seg_cache(CPUX86St/
cpu_x86_load_seg_cache_sipi	cpu.h	/^static inline void cpu_x86_load_seg_cache_sipi(CPU/
cpu_x86_register	cpuid.c	/^int cpu_x86_register (CPUX86State *env, const char/
cpu_x86_set_a20	helper.c	/^void cpu_x86_set_a20(CPUX86State *env, int a20_sta/
cpu_x86_set_cpl	cpu.h	/^static inline void cpu_x86_set_cpl(CPUX86State *s,/
cpu_x86_update_cr0	helper.c	/^void cpu_x86_update_cr0(CPUX86State *env, uint32_t/
cpu_x86_update_cr3	helper.c	/^void cpu_x86_update_cr3(CPUX86State *env, target_u/
cpu_x86_update_cr4	helper.c	/^void cpu_x86_update_cr4(CPUX86State *env, uint32_t/
cpudef_register	cpuid.c	/^static int cpudef_register(QemuOpts *opts, void *o/
cpudef_setfield	cpuid.c	/^static int cpudef_setfield(const char *name, const/
cpyid	cpuid.c	/^static void cpyid(const char *s, uint32_t *id)$/
debug	PyQEMU.py	/^	def debug(self, message):$/
disas_insn	translate.c	/^static target_ulong disas_insn(DisasContext *s, ta/
div64	op_helper.c	/^static int div64(uint64_t *plow, uint64_t *phigh, /
do_cpu_init	helper.c	/^void do_cpu_init(CPUState *env)$/
do_cpu_init	helper.c	/^void do_cpu_init(CPUState *env)$/
do_cpu_sipi	helper.c	/^void do_cpu_sipi(CPUState *env)$/
do_cpu_sipi	helper.c	/^void do_cpu_sipi(CPUState *env)$/
do_hlt	op_helper.c	/^static void do_hlt(void)$/
do_interrupt	op_helper.c	/^void do_interrupt(int intno, int is_int, int error/
do_interrupt64	op_helper.c	/^static void do_interrupt64(int intno, int is_int, /
do_interrupt_protected	op_helper.c	/^static void do_interrupt_protected(int intno, int /
do_interrupt_real	op_helper.c	/^static void do_interrupt_real(int intno, int is_in/
do_interrupt_user	op_helper.c	/^void do_interrupt_user(int intno, int is_int, int /
do_smm_enter	op_helper.c	/^void do_smm_enter(void)$/
do_smm_enter	op_helper.c	/^void do_smm_enter(void)$/
ensure_error_handling_helper	PyQEMU.py	/^def ensure_error_handling_helper(func):$/
error	PyQEMU.py	/^	def error(self, message):$/
error_dummy	PyQEMU.py	/^def error_dummy(func, *args):$/
exeption_has_error_code	op_helper.c	/^static int exeption_has_error_code(int intno)$/
ffs1	ops_sse.h	/^static inline int ffs1(unsigned int val)$/
find_hw_breakpoint	kvm.c	/^static int find_hw_breakpoint(target_ulong addr, i/
float64_to_floatx	exec.h	/^#define float64_to_floatx(x, e) (x)$/
floatx_to_float64	exec.h	/^#define floatx_to_float64(x, e) (x)$/
flx_arithwindow_bblexec	flx_arithwindow.c	/^int flx_arithwindow_bblexec(uint32_t eip, uint32_t/
flx_arithwindow_bbltranslate	flx_arithwindow.c	/^int flx_arithwindow_bbltranslate(flx_bbl* bbl){$/
flx_arithwindow_cache_add	flx_arithwindow.c	/^static inline void flx_arithwindow_cache_add(uint3/
flx_arithwindow_cache_del	flx_arithwindow.c	/^static inline void flx_arithwindow_cache_del(uint3/
flx_arithwindow_cache_init	flx_arithwindow.c	/^static inline void flx_arithwindow_cache_init(void/
flx_arithwindow_cache_search	flx_arithwindow.c	/^static inline int flx_arithwindow_cache_search(uin/
flx_arithwindow_destroy	flx_arithwindow.c	/^void flx_arithwindow_destroy(void){$/
flx_arithwindow_disable	flx_arithwindow.c	/^void flx_arithwindow_disable(void){$/
flx_arithwindow_enable	flx_arithwindow.c	/^void flx_arithwindow_enable(uint32_t window_size, /
flx_arithwindow_init	flx_arithwindow.c	/^void flx_arithwindow_init(arithwindow_handler hand/
flx_bbl_add	flx_bbl.c	/^void flx_bbl_add(flx_bbl* bbl){$/
flx_bbl_addrtotree	flx_bbl.c	/^flx_bbl_addrtotree(uint32_t addr){$/
flx_bbl_cache_hit	flx_bbl.c	/^flx_bbl_cache_hit(uint32_t address){$/
flx_bbl_cache_index	flx_bbl.c	/^flx_bbl_cache_index(uint32_t address){$/
flx_bbl_cache_invalidate	flx_bbl.c	/^flx_bbl_cache_invalidate(void){$/
flx_bbl_cache_update	flx_bbl.c	/^flx_bbl_cache_update(flx_bbl* bbl){$/
flx_bbl_destroy	flx_bbl.c	/^void flx_bbl_destroy(void){$/
flx_bbl_flush	flx_bbl.c	/^void flx_bbl_flush(void){$/
flx_bbl_init	flx_bbl.c	/^void flx_bbl_init(void){$/
flx_bbl_search	flx_bbl.c	/^flx_bbl_search(uint32_t address){$/
flx_bbltrace_disable	flx_bbltrace.c	/^void flx_bbltrace_disable(void){$/
flx_bbltrace_enable	flx_bbltrace.c	/^void flx_bbltrace_enable(void){$/
flx_bbltrace_event	flx_bbltrace.c	/^void flx_bbltrace_event(uint32_t eip, uint32_t esp/
flx_bbltrace_init	flx_bbltrace.c	/^void flx_bbltrace_init(void){$/
flx_bbltrace_register_handler	flx_bbltrace.c	/^void flx_bbltrace_register_handler(bbltrace_handle/
flx_bbltrace_unregister_handler	flx_bbltrace.c	/^void flx_bbltrace_unregister_handler(bbltrace_hand/
flx_bbltranslate_arith	flx_bbltranslate.c	/^void flx_bbltranslate_arith(void){$/
flx_bbltranslate_bbl_end	flx_bbltranslate.c	/^void flx_bbltranslate_bbl_end(void){$/
flx_bbltranslate_bbl_new	flx_bbltranslate.c	/^void flx_bbltranslate_bbl_new(uint32_t addr){$/
flx_bbltranslate_disable	flx_bbltranslate.c	/^void flx_bbltranslate_disable(void){$/
flx_bbltranslate_enable	flx_bbltranslate.c	/^void flx_bbltranslate_enable(void){$/
flx_bbltranslate_init	flx_bbltranslate.c	/^void flx_bbltranslate_init(void){$/
flx_bbltranslate_insn	flx_bbltranslate.c	/^void flx_bbltranslate_insn(void){$/
flx_bbltranslate_register_handler	flx_bbltranslate.c	/^void flx_bbltranslate_register_handler(bbltranslat/
flx_bbltranslate_unregister_handler	flx_bbltranslate.c	/^void flx_bbltranslate_unregister_handler(bbltransl/
flx_breakpoint_alloc	flx_breakpoint.c	/^static flx_breakpoint* flx_breakpoint_alloc(uint32/
flx_breakpoint_delete	flx_breakpoint.c	/^int flx_breakpoint_delete(uint32_t addr, uint32_t /
flx_breakpoint_free	flx_breakpoint.c	/^static void flx_breakpoint_free(flx_breakpoint* bp/
flx_breakpoint_init	flx_breakpoint.c	/^void flx_breakpoint_init(void){$/
flx_breakpoint_insert	flx_breakpoint.c	/^void flx_breakpoint_insert(uint32_t addr, uint32_t/
flx_breakpoint_search	flx_breakpoint.c	/^int flx_breakpoint_search(uint32_t addr, uint32_t /
flx_breakpoint_search_addr	flx_breakpoint.c	/^int flx_breakpoint_search_addr(uint32_t addr, uint/
flx_caballero_disable	flx_caballero.c	/^void flx_caballero_disable(void){$/
flx_caballero_enable	flx_caballero.c	/^void flx_caballero_enable(uint32_t min_icount, flo/
flx_caballero_event	flx_caballero.c	/^int flx_caballero_event(flx_bbl* bbl){$/
flx_caballero_init	flx_caballero.c	/^void flx_caballero_init(caballero_handler handler)/
flx_calltrace_bblexec	flx_calltrace.c	/^int flx_calltrace_bblexec(uint32_t eip, uint32_t e/
flx_calltrace_current_stackframes	flx_calltrace.c	/^flx_calltrace_current_stackframes(void){$/
flx_calltrace_disable	flx_calltrace.c	/^void flx_calltrace_disable(void){$/
flx_calltrace_enable	flx_calltrace.c	/^void flx_calltrace_enable(void){$/
flx_calltrace_event	flx_calltrace.c	/^void flx_calltrace_event(uint32_t old_eip, uint32_/
flx_calltrace_init	flx_calltrace.c	/^void flx_calltrace_init(void){$/
flx_calltrace_register_handler	flx_calltrace.c	/^void flx_calltrace_register_handler(calltrace_hand/
flx_calltrace_stackframes_alloc	flx_calltrace.c	/^flx_calltrace_stackframes_alloc(void){$/
flx_calltrace_stackframes_destroy	flx_calltrace.c	/^flx_calltrace_stackframes_destroy(flx_context* con/
flx_calltrace_stackframes_left	flx_calltrace.c	/^flx_calltrace_stackframes_left(flx_stackframes* st/
flx_calltrace_stackframes_pop	flx_calltrace.c	/^flx_calltrace_stackframes_pop(flx_stackframes* sta/
flx_calltrace_stackframes_push	flx_calltrace.c	/^flx_calltrace_stackframes_push(flx_stackframes* st/
flx_calltrace_stackframes_realloc	flx_calltrace.c	/^flx_calltrace_stackframes_realloc(flx_stackframes*/
flx_calltrace_unregister_handler	flx_calltrace.c	/^void flx_calltrace_unregister_handler(calltrace_ha/
flx_constsearch_current_memory	flx_constsearch.c	/^flx_constsearch_current_memory(void){$/
flx_constsearch_destructor	flx_constsearch.c	/^flx_constsearch_destructor(flx_context* c){$/
flx_constsearch_disable	flx_constsearch.c	/^void flx_constsearch_disable(void){$/
flx_constsearch_enable	flx_constsearch.c	/^void flx_constsearch_enable(void){$/
flx_constsearch_init	flx_constsearch.c	/^void flx_constsearch_init(constsearch_handler hand/
flx_constsearch_match	flx_constsearch.c	/^flx_constsearch_match(mem_block* block){$/
flx_constsearch_memaccess	flx_constsearch.c	/^int flx_constsearch_memaccess(uint32_t address, ui/
flx_constsearch_pattern	flx_constsearch.c	/^void flx_constsearch_pattern(uint8_t* pattern, uin/
flx_constsearch_search	flx_constsearch.c	/^void flx_constsearch_search(void){$/
flx_context_alloc	flx_context.c	/^flx_context_alloc(uint16_t pid, uint16_t tid){$/
flx_context_current	flx_context.c	/^flx_context_current(void){$/
flx_context_init	flx_context.c	/^void flx_context_init(void){$/
flx_context_set	flx_context.c	/^void flx_context_set(int32_t p, int32_t t){$/
flx_entropy_callevent	flx_entropy.c	/^int flx_entropy_callevent(uint32_t old_eip, uint32/
flx_entropy_disable	flx_entropy.c	/^void flx_entropy_disable(void){$/
flx_entropy_enable	flx_entropy.c	/^void flx_entropy_enable(uint32_t min_icount, float/
flx_entropy_init	flx_entropy.c	/^void flx_entropy_init(entropy_handler handler){$/
flx_entropy_memaccess	flx_entropy.c	/^int flx_entropy_memaccess(uint32_t address, uint32/
flx_entropy_start	flx_entropy.c	/^static void flx_entropy_start(void){$/
flx_entropy_stop	flx_entropy.c	/^static void flx_entropy_stop(void){$/
flx_filter_add_by_addr	flx_filter.c	/^int flx_filter_add_by_addr(uint32_t address){$/
flx_filter_add_by_range	flx_filter.c	/^int flx_filter_add_by_range(uint32_t start, uint32/
flx_filter_addrtopage	flx_filter.c	/^flx_filter_addrtopage(uint32_t addr){$/
flx_filter_addrtotree	flx_filter.c	/^flx_filter_addrtotree(uint32_t addr){$/
flx_filter_addrtovalue	flx_filter.c	/^flx_filter_addrtovalue(uint32_t addr){$/
flx_filter_cache_hit	flx_filter.c	/^flx_filter_cache_hit(uint32_t address){$/
flx_filter_cache_index	flx_filter.c	/^flx_filter_cache_index(uint32_t address){$/
flx_filter_cache_invalidate	flx_filter.c	/^flx_filter_cache_invalidate(uint32_t address){$/
flx_filter_cache_update	flx_filter.c	/^flx_filter_cache_update(uint32_t address){$/
flx_filter_del_by_addr	flx_filter.c	/^int flx_filter_del_by_addr(uint32_t address){$/
flx_filter_del_by_range	flx_filter.c	/^int flx_filter_del_by_range(uint32_t start, uint32/
flx_filter_destroy	flx_filter.c	/^void flx_filter_destroy(void){$/
flx_filter_disable	flx_filter.c	/^void flx_filter_disable(void){$/
flx_filter_enable	flx_filter.c	/^void flx_filter_enable(void){$/
flx_filter_init	flx_filter.c	/^void flx_filter_init(void){$/
flx_filter_search_by_addr	flx_filter.c	/^int flx_filter_search_by_addr(uint32_t address){$/
flx_filter_search_by_range	flx_filter.c	/^int flx_filter_search_by_range(uint32_t start, uin/
flx_functionentropy_calculate_entropy	flx_functionentropy.c	/^flx_functionentropy_calculate_entropy(memtracker* /
flx_functionentropy_current_stackframe	flx_functionentropy.c	/^flx_functionentropy_current_stackframe(void){$/
flx_functionentropy_disable	flx_functionentropy.c	/^void flx_functionentropy_disable(void){$/
flx_functionentropy_enable	flx_functionentropy.c	/^void flx_functionentropy_enable(float threshold){$/
flx_functionentropy_functionevent	flx_functionentropy.c	/^int flx_functionentropy_functionevent(uint32_t old/
flx_functionentropy_functionevent_call	flx_functionentropy.c	/^flx_functionentropy_functionevent_call(uint32_t ne/
flx_functionentropy_functionevent_ret	flx_functionentropy.c	/^flx_functionentropy_functionevent_ret(void){$/
flx_functionentropy_init	flx_functionentropy.c	/^void flx_functionentropy_init(functionentropy_hand/
flx_functionentropy_memaccess	flx_functionentropy.c	/^int flx_functionentropy_memaccess(uint32_t address/
flx_functionentropy_stackframe_alloc	flx_functionentropy.c	/^flx_functionentropy_stackframe_alloc(void){$/
flx_functionentropy_stackframe_dealloc	flx_functionentropy.c	/^flx_functionentropy_stackframe_dealloc(function_st/
flx_functionentropy_stackframe_destroy	flx_functionentropy.c	/^flx_functionentropy_stackframe_destroy(flx_context/
flx_functiontrace_disable	flx_functiontrace.c	/^void flx_functiontrace_disable(void){$/
flx_functiontrace_enable	flx_functiontrace.c	/^void flx_functiontrace_enable(void){$/
flx_functiontrace_event	flx_functiontrace.c	/^int flx_functiontrace_event(uint32_t old_eip, uint/
flx_functiontrace_init	flx_functiontrace.c	/^void flx_functiontrace_init(functiontrace_handler /
flx_get_vmem_dword	op_helper.c	/^int flx_get_vmem_dword(uint32_t address, uint32_t /
flx_get_vmem_word	op_helper.c	/^int flx_get_vmem_word(uint32_t address, uint16_t */
flx_global_hook	flx_hooking.h	/^#define flx_global_hook(conditions, context, hook,/
flx_helper_debug	op_helper.c	/^#define flx_helper_debug(s, ...) do{}while(0)$/
flx_hex_dump	op_helper.c	/^void flx_hex_dump(uint32_t address, uint32_t len)$/
flx_hook	flx_hooking.h	/^#define flx_hook(conditions, context, hook, ...) d/
flx_memtrace_disable	flx_memtrace.c	/^void flx_memtrace_disable(void){$/
flx_memtrace_enable	flx_memtrace.c	/^void flx_memtrace_enable(void){$/
flx_memtrace_event	flx_memtrace.c	/^void flx_memtrace_event(uint32_t address, uint32_t/
flx_memtrace_init	flx_memtrace.c	/^void flx_memtrace_init(void){$/
flx_memtrace_read	translate.c	/^void flx_memtrace_read(TCGv ret, TCGv addr, uint8_/
flx_memtrace_register_handler	flx_memtrace.c	/^void flx_memtrace_register_handler(memtrace_handle/
flx_memtrace_unregister_handler	flx_memtrace.c	/^void flx_memtrace_unregister_handler(memtrace_hand/
flx_memtrace_write	translate.c	/^void flx_memtrace_write(TCGv arg, TCGv addr, uint8/
flx_memtrack_delete	flx_memtrack.c	/^flx_memtrack_delete(memtracker* tracker){$/
flx_memtrack_iterate	flx_memtrack.c	/^flx_memtrack_iterate(memtracker* tracker, memtrack/
flx_memtrack_iterator	flx_memtrack.c	/^flx_memtrack_iterator(void){$/
flx_memtrack_load	flx_memtrack.c	/^flx_memtrack_load(memtracker* tracker, uint32_t ad/
flx_memtrack_merge	flx_memtrack.c	/^flx_memtrack_merge(memtracker* dst, memtracker* sr/
flx_memtrack_new	flx_memtrack.c	/^memtracker* flx_memtrack_new(void){$/
flx_memtrack_store	flx_memtrack.c	/^flx_memtrack_store(memtracker* tracker, uint32_t a/
flx_module_alloc	flx_module.c	/^flx_module_alloc(void){$/
flx_module_byname	flx_module.c	/^flx_module_byname(flx_module_list* list, char* nam/
flx_module_delete	flx_module.c	/^flx_module_delete(flx_module_list* list, char* nam/
flx_module_list_alloc	flx_list.c	/^flx_module_list_alloc(void){$/
flx_module_list_append	flx_list.c	/^flx_module_list_append(flx_module_list* list, flx_/
flx_module_list_byname	flx_list.c	/^flx_module_list_byname(flx_module_list* list, char/
flx_module_list_delete	flx_list.c	/^flx_module_list_delete(flx_module_list* list){$/
flx_module_list_free	flx_list.c	/^flx_module_list_free(flx_module_list* list){$/
flx_module_list_new	flx_list.c	/^flx_module_list_new(void){$/
flx_module_list_remove	flx_list.c	/^flx_module_list_remove(flx_module_list* list, flx_/
flx_module_new	flx_module.c	/^flx_module_new(flx_module_list* list, char* name){/
flx_optrace_disable	flx_optrace.c	/^void flx_optrace_disable(void){$/
flx_optrace_enable	flx_optrace.c	/^void flx_optrace_enable(void){$/
flx_optrace_event	flx_optrace.c	/^void flx_optrace_event(uint32_t eip, uint32_t opco/
flx_optrace_init	flx_optrace.c	/^void flx_optrace_init(optrace_handler handler){$/
flx_optrace_status	flx_optrace.c	/^int flx_optrace_status(void){$/
flx_process_tb_alloc	flx_tbrestoring.c	/^flx_process_tb_alloc(uint32_t cr3){$/
flx_process_tb_free	flx_tbrestoring.c	/^flx_process_tb_free(flx_process_tb* tb){$/
flx_shadowmem_block_dealloc	flx_shadowmem.c	/^flx_shadowmem_block_dealloc(mem_block* block){$/
flx_shadowmem_delete	flx_shadowmem.c	/^flx_shadowmem_delete(shadowmem* mem){$/
flx_shadowmem_find_page	flx_shadowmem.c	/^flx_shadowmem_find_page(shadowmem* mem, uint32_t a/
flx_shadowmem_get_next_blockbyte	flx_shadowmem.c	/^flx_shadowmem_get_next_blockbyte(shadowmem_iterato/
flx_shadowmem_get_next_blockstart	flx_shadowmem.c	/^flx_shadowmem_get_next_blockstart(shadowmem_iterat/
flx_shadowmem_iterate	flx_shadowmem.c	/^flx_shadowmem_iterate(shadowmem_iterator* iter, ui/
flx_shadowmem_iterator_delete	flx_shadowmem.c	/^flx_shadowmem_iterator_delete(shadowmem_iterator* /
flx_shadowmem_iterator_new	flx_shadowmem.c	/^flx_shadowmem_iterator_new(shadowmem* mem){$/
flx_shadowmem_load	flx_shadowmem.c	/^flx_shadowmem_load(shadowmem* mem, uint32_t addres/
flx_shadowmem_new	flx_shadowmem.c	/^flx_shadowmem_new(void){$/
flx_shadowmem_store	flx_shadowmem.c	/^flx_shadowmem_store(shadowmem* mem, uint32_t addre/
flx_tbrestore_delete	flx_tbrestoring.c	/^void flx_tbrestore_delete(uint32_t cr3){$/
flx_tbrestore_init	flx_tbrestoring.c	/^void flx_tbrestore_init(void){$/
flx_tbrestore_new	flx_tbrestoring.c	/^void flx_tbrestore_new(uint32_t cr3){$/
flx_tbrestore_restore	flx_tbrestoring.c	/^int flx_tbrestore_restore(uint32_t cr3){$/
flx_tbrestore_save	flx_tbrestoring.c	/^int flx_tbrestore_save(uint32_t cr3){$/
flx_vmem_to_phys	op_helper.c	/^uint32_t flx_vmem_to_phys(uint32_t address)$/
flxinstrument_arithwindow_event	flx_instrument.c	/^int flxinstrument_arithwindow_event(uint32_t eip) /
flxinstrument_bbltrace_event	flx_instrument.c	/^int flxinstrument_bbltrace_event(uint32_t eip, uin/
flxinstrument_breakpoint_event	flx_instrument.c	/^int flxinstrument_breakpoint_event(uint32_t eip) {/
flxinstrument_caballero_event	flx_instrument.c	/^int flxinstrument_caballero_event(uint32_t eip, ui/
flxinstrument_call_event	flx_instrument.c	/^int flxinstrument_call_event(uint32_t call_origin,/
flxinstrument_constsearch_event	flx_instrument.c	/^int flxinstrument_constsearch_event(uint32_t eip, /
flxinstrument_functionentropy_event	flx_instrument.c	/^int flxinstrument_functionentropy_event(float entr/
flxinstrument_functiontrace_event	flx_instrument.c	/^int flxinstrument_functiontrace_event(uint32_t eip/
flxinstrument_init	flx_instrument.c	/^void flxinstrument_init(void) { $/
flxinstrument_jmp_event	flx_instrument.c	/^int flxinstrument_jmp_event(uint32_t jmp_source, u/
flxinstrument_memtrace_event	flx_instrument.c	/^int flxinstrument_memtrace_event(uint32_t address,/
flxinstrument_register_callbacks	flx_instrument.c	/^flxinstrument_register_callbacks(void){$/
flxinstrument_ret_event	flx_instrument.c	/^int flxinstrument_ret_event(uint32_t eip, uint32_t/
flxinstrument_shutdown_event	flx_instrument.c	/^int flxinstrument_shutdown_event(void) {$/
flxinstrument_state_init	flx_instrument.c	/^flxinstrument_state_init(void){$/
flxinstrument_syscall_event	flx_instrument.c	/^int flxinstrument_syscall_event(uint32_t eax) {$/
flxinstrument_update_cr3	flx_instrument.c	/^int flxinstrument_update_cr3(uint32_t old_cr3, uin/
fp64_to_fp80	machine.c	/^static void fp64_to_fp80(union x86_longdouble *p, /
fpop	exec.h	/^static inline void fpop(void)$/
fpregs_is_0	machine.c	/^static bool fpregs_is_0(void *opaque, int version_/
fpregs_is_0_mmx	machine.c	/^static bool fpregs_is_0_mmx(void *opaque, int vers/
fpregs_is_0_no_mmx	machine.c	/^static bool fpregs_is_0_no_mmx(void *opaque, int v/
fpregs_is_1	machine.c	/^static bool fpregs_is_1(void *opaque, int version_/
fpregs_is_1_mmx	machine.c	/^static bool fpregs_is_1_mmx(void *opaque, int vers/
fpregs_is_1_no_mmx	machine.c	/^static bool fpregs_is_1_no_mmx(void *opaque, int v/
fpu_raise_exception	op_helper.c	/^static void fpu_raise_exception(void)$/
fpu_set_exception	op_helper.c	/^static void fpu_set_exception(int mask)$/
fpush	exec.h	/^static inline void fpush(void)$/
funktionen	FLX_TODO	/^	- keine nutzung von api funktionen (syscalls)    /
gen_add_A0_ds_seg	translate.c	/^static void gen_add_A0_ds_seg(DisasContext *s)$/
gen_add_A0_im	translate.c	/^static void gen_add_A0_im(DisasContext *s, int val/
gen_check_io	translate.c	/^static void gen_check_io(DisasContext *s, int ot, /
gen_cmps	translate.c	/^static inline void gen_cmps(DisasContext *s, int o/
gen_compute_eflags	translate.c	/^static void gen_compute_eflags(TCGv reg)$/
gen_compute_eflags_c	translate.c	/^static void gen_compute_eflags_c(TCGv reg)$/
gen_debug	translate.c	/^static void gen_debug(DisasContext *s, target_ulon/
gen_enter	translate.c	/^static void gen_enter(DisasContext *s, int esp_add/
gen_eob	translate.c	/^static void gen_eob(DisasContext *s)$/
gen_exception	translate.c	/^static void gen_exception(DisasContext *s, int tra/
gen_exts	translate.c	/^static void gen_exts(int ot, TCGv reg)$/
gen_extu	translate.c	/^static void gen_extu(int ot, TCGv reg)$/
gen_flx_bblstart	translate.c	/^static void gen_flx_bblstart(target_ulong cur_eip,/
gen_flx_debug	translate.c	/^static void gen_flx_debug(DisasContext *s, target_/
gen_goto_tb	translate.c	/^static inline void gen_goto_tb(DisasContext *s, in/
gen_helper_fp_arith_STN_ST0	translate.c	/^static void gen_helper_fp_arith_STN_ST0(int op, in/
gen_helper_in_func	translate.c	/^static void gen_helper_in_func(int ot, TCGv v, TCG/
gen_helper_out_func	translate.c	/^static void gen_helper_out_func(int ot, TCGv_i32 v/
gen_inc	translate.c	/^static void gen_inc(DisasContext *s1, int ot, int /
gen_ins	translate.c	/^static inline void gen_ins(DisasContext *s, int ot/
gen_intermediate_code	translate.c	/^void gen_intermediate_code(CPUState *env, Translat/
gen_intermediate_code_internal	translate.c	/^static inline void gen_intermediate_code_internal(/
gen_intermediate_code_pc	translate.c	/^void gen_intermediate_code_pc(CPUState *env, Trans/
gen_interrupt	translate.c	/^static void gen_interrupt(DisasContext *s, int int/
gen_jcc	translate.c	/^static inline void gen_jcc(DisasContext *s, int b,/
gen_jcc1	translate.c	/^static inline void gen_jcc1(DisasContext *s, int c/
gen_jmp	translate.c	/^static void gen_jmp(DisasContext *s, target_ulong /
gen_jmp_im	translate.c	/^static inline void gen_jmp_im(target_ulong pc)$/
gen_jmp_tb	translate.c	/^static void gen_jmp_tb(DisasContext *s, target_ulo/
gen_jz_ecx_string	translate.c	/^static int gen_jz_ecx_string(DisasContext *s, targ/
gen_ldo_env_A0	translate.c	/^static inline void gen_ldo_env_A0(int idx, int off/
gen_ldq_env_A0	translate.c	/^static inline void gen_ldq_env_A0(int idx, int off/
gen_ldst_modrm	translate.c	/^static void gen_ldst_modrm(DisasContext *s, int mo/
gen_lea_modrm	translate.c	/^static void gen_lea_modrm(DisasContext *s, int mod/
gen_lods	translate.c	/^static inline void gen_lods(DisasContext *s, int o/
gen_movl_seg_T0	translate.c	/^static void gen_movl_seg_T0(DisasContext *s, int s/
gen_movs	translate.c	/^static inline void gen_movs(DisasContext *s, int o/
gen_movtl_T0_im	translate.c	/^static inline void gen_movtl_T0_im(target_ulong va/
gen_movtl_T1_im	translate.c	/^static inline void gen_movtl_T1_im(target_ulong va/
gen_nop_modrm	translate.c	/^static void gen_nop_modrm(DisasContext *s, int mod/
gen_op	translate.c	/^static void gen_op(DisasContext *s1, int op, int o/
gen_op_add_reg_T0	translate.c	/^static inline void gen_op_add_reg_T0(int size, int/
gen_op_add_reg_im	translate.c	/^static inline void gen_op_add_reg_im(int size, int/
gen_op_addl_A0_im	translate.c	/^static inline void gen_op_addl_A0_im(int32_t val)$/
gen_op_addl_A0_reg_sN	translate.c	/^static inline void gen_op_addl_A0_reg_sN(int shift/
gen_op_addl_A0_seg	translate.c	/^static inline void gen_op_addl_A0_seg(int reg)$/
gen_op_addl_T0_T1	translate.c	/^static inline void gen_op_addl_T0_T1(void)$/
gen_op_addq_A0_im	translate.c	/^static inline void gen_op_addq_A0_im(int64_t val)$/
gen_op_addq_A0_reg_sN	translate.c	/^static inline void gen_op_addq_A0_reg_sN(int shift/
gen_op_addq_A0_seg	translate.c	/^static inline void gen_op_addq_A0_seg(int reg)$/
gen_op_andl_A0_ffff	translate.c	/^static inline void gen_op_andl_A0_ffff(void)$/
gen_op_andl_T0_ffff	translate.c	/^static inline void gen_op_andl_T0_ffff(void)$/
gen_op_andl_T0_im	translate.c	/^static inline void gen_op_andl_T0_im(uint32_t val)/
gen_op_cmpl_T0_T1_cc	translate.c	/^static inline void gen_op_cmpl_T0_T1_cc(void)$/
gen_op_jmp_T0	translate.c	/^static inline void gen_op_jmp_T0(void)$/
gen_op_jnz_ecx	translate.c	/^static inline void gen_op_jnz_ecx(int size, int la/
gen_op_jz_ecx	translate.c	/^static inline void gen_op_jz_ecx(int size, int lab/
gen_op_ld_T0_A0	translate.c	/^static inline void gen_op_ld_T0_A0(int idx)$/
gen_op_ld_T1_A0	translate.c	/^static inline void gen_op_ld_T1_A0(int idx)$/
gen_op_ld_v	translate.c	/^static inline void gen_op_ld_v(int idx, TCGv t0, T/
gen_op_lds_T0_A0	translate.c	/^static inline void gen_op_lds_T0_A0(int idx)$/
gen_op_ldu_T0_A0	translate.c	/^static inline void gen_op_ldu_T0_A0(int idx)$/
gen_op_mov_TN_reg	translate.c	/^static inline void gen_op_mov_TN_reg(int ot, int t/
gen_op_mov_reg_A0	translate.c	/^static inline void gen_op_mov_reg_A0(int size, int/
gen_op_mov_reg_T0	translate.c	/^static inline void gen_op_mov_reg_T0(int ot, int r/
gen_op_mov_reg_T1	translate.c	/^static inline void gen_op_mov_reg_T1(int ot, int r/
gen_op_mov_reg_v	translate.c	/^static inline void gen_op_mov_reg_v(int ot, int re/
gen_op_mov_v_reg	translate.c	/^static inline void gen_op_mov_v_reg(int ot, TCGv t/
gen_op_movl	translate.c	/^static inline void gen_op_movl(int d_offset, int s/
gen_op_movl_A0_im	translate.c	/^static inline void gen_op_movl_A0_im(uint32_t val)/
gen_op_movl_A0_reg	translate.c	/^static inline void gen_op_movl_A0_reg(int reg)$/
gen_op_movl_A0_seg	translate.c	/^static inline void gen_op_movl_A0_seg(int reg)$/
gen_op_movl_T0_0	translate.c	/^static inline void gen_op_movl_T0_0(void)$/
gen_op_movl_T0_Dshift	translate.c	/^static inline void gen_op_movl_T0_Dshift(int ot) $/
gen_op_movl_T0_T1	translate.c	/^static inline void gen_op_movl_T0_T1(void)$/
gen_op_movl_T0_im	translate.c	/^static inline void gen_op_movl_T0_im(int32_t val)$/
gen_op_movl_T0_imu	translate.c	/^static inline void gen_op_movl_T0_imu(uint32_t val/
gen_op_movl_T0_seg	translate.c	/^static inline void gen_op_movl_T0_seg(int seg_reg)/
gen_op_movl_T1_im	translate.c	/^static inline void gen_op_movl_T1_im(int32_t val)$/
gen_op_movl_T1_imu	translate.c	/^static inline void gen_op_movl_T1_imu(uint32_t val/
gen_op_movl_seg_T0_vm	translate.c	/^static inline void gen_op_movl_seg_T0_vm(int seg_r/
gen_op_movo	translate.c	/^static inline void gen_op_movo(int d_offset, int s/
gen_op_movq	translate.c	/^static inline void gen_op_movq(int d_offset, int s/
gen_op_movq_A0_im	translate.c	/^static inline void gen_op_movq_A0_im(int64_t val)$/
gen_op_movq_A0_reg	translate.c	/^static inline void gen_op_movq_A0_reg(int reg)$/
gen_op_movq_A0_seg	translate.c	/^static inline void gen_op_movq_A0_seg(int reg)$/
gen_op_movq_env_0	translate.c	/^static inline void gen_op_movq_env_0(int d_offset)/
gen_op_set_cc_op	translate.c	/^static inline void gen_op_set_cc_op(int32_t val)$/
gen_op_st_T0_A0	translate.c	/^static inline void gen_op_st_T0_A0(int idx)$/
gen_op_st_T1_A0	translate.c	/^static inline void gen_op_st_T1_A0(int idx)$/
gen_op_st_v	translate.c	/^static inline void gen_op_st_v(int idx, TCGv t0, T/
gen_op_testl_T0_T1_cc	translate.c	/^static inline void gen_op_testl_T0_T1_cc(void)$/
gen_op_update1_cc	translate.c	/^static void gen_op_update1_cc(void)$/
gen_op_update2_cc	translate.c	/^static void gen_op_update2_cc(void)$/
gen_op_update_neg_cc	translate.c	/^static void gen_op_update_neg_cc(void)$/
gen_outs	translate.c	/^static inline void gen_outs(DisasContext *s, int o/
gen_pc_load	translate.c	/^void gen_pc_load(CPUState *env, TranslationBlock */
gen_pop_T0	translate.c	/^static void gen_pop_T0(DisasContext *s)$/
gen_pop_update	translate.c	/^static void gen_pop_update(DisasContext *s)$/
gen_popa	translate.c	/^static void gen_popa(DisasContext *s)$/
gen_push_T0	translate.c	/^static void gen_push_T0(DisasContext *s)$/
gen_push_T1	translate.c	/^static void gen_push_T1(DisasContext *s)$/
gen_pusha	translate.c	/^static void gen_pusha(DisasContext *s)$/
gen_rot_rm_T1	translate.c	/^static void gen_rot_rm_T1(DisasContext *s, int ot,/
gen_rot_rm_im	translate.c	/^static void gen_rot_rm_im(DisasContext *s, int ot,/
gen_rotc_rm_T1	translate.c	/^static void gen_rotc_rm_T1(DisasContext *s, int ot/
gen_scas	translate.c	/^static inline void gen_scas(DisasContext *s, int o/
gen_setcc	translate.c	/^static void gen_setcc(DisasContext *s, int b)$/
gen_setcc_slow_T0	translate.c	/^static inline void gen_setcc_slow_T0(DisasContext /
gen_shift	translate.c	/^static void gen_shift(DisasContext *s1, int op, in/
gen_shift_rm_T1	translate.c	/^static void gen_shift_rm_T1(DisasContext *s, int o/
gen_shift_rm_im	translate.c	/^static void gen_shift_rm_im(DisasContext *s, int o/
gen_shiftd_rm_T1_T3	translate.c	/^static void gen_shiftd_rm_T1_T3(DisasContext *s, i/
gen_shifti	translate.c	/^static void gen_shifti(DisasContext *s1, int op, i/
gen_sse	translate.c	/^static void gen_sse(DisasContext *s, int b, target/
gen_stack_A0	translate.c	/^static void gen_stack_A0(DisasContext *s)$/
gen_stack_update	translate.c	/^static inline void gen_stack_update(DisasContext */
gen_sto_env_A0	translate.c	/^static inline void gen_sto_env_A0(int idx, int off/
gen_stos	translate.c	/^static inline void gen_stos(DisasContext *s, int o/
gen_stq_env_A0	translate.c	/^static inline void gen_stq_env_A0(int idx, int off/
gen_string_movl_A0_EDI	translate.c	/^static inline void gen_string_movl_A0_EDI(DisasCon/
gen_string_movl_A0_ESI	translate.c	/^static inline void gen_string_movl_A0_ESI(DisasCon/
gen_svm_check_intercept	translate.c	/^gen_svm_check_intercept(DisasContext *s, target_ul/
gen_svm_check_intercept_param	translate.c	/^gen_svm_check_intercept_param(DisasContext *s, tar/
gen_update_cc_op	translate.c	/^static inline void gen_update_cc_op(DisasContext */
getLogfile	PyQEMU.py	/^	def getLogfile(self, process):$/
getVirtualMachine	PyQEMU.py	/^def getVirtualMachine():$/
get_cpuid_vendor	cpuid.c	/^static void get_cpuid_vendor(CPUX86State *env, uin/
get_current_register	translate.c	/^int get_current_register(int index){$/
get_fpreg	machine.c	/^static int get_fpreg(QEMUFile *f, void *opaque, si/
get_fpreg	machine.c	/^static int get_fpreg(QEMUFile *f, void *opaque, si/
get_fpreg_0_mmx	machine.c	/^static int get_fpreg_0_mmx(QEMUFile *f, void *opaq/
get_fpreg_0_no_mmx	machine.c	/^static int get_fpreg_0_no_mmx(QEMUFile *f, void *o/
get_fpreg_1_mmx	machine.c	/^static int get_fpreg_1_mmx(QEMUFile *f, void *opaq/
get_fpreg_1_no_mmx	machine.c	/^static int get_fpreg_1_no_mmx(QEMUFile *f, void *o/
get_para_features	kvm.c	/^static int get_para_features(CPUState *env)$/
get_rsp_from_tss	op_helper.c	/^static inline target_ulong get_rsp_from_tss(int le/
get_seg	kvm.c	/^static void get_seg(SegmentCache *lhs, const struc/
get_seg_base	op_helper.c	/^static inline uint32_t get_seg_base(uint32_t e1, u/
get_seg_limit	op_helper.c	/^static inline unsigned int get_seg_limit(uint32_t /
get_sp_mask	op_helper.c	/^static inline unsigned int get_sp_mask(unsigned in/
get_ss_esp_from_tss	op_helper.c	/^static inline void get_ss_esp_from_tss(uint32_t *s/
get_uint64_as_uint32	machine.c	/^static int get_uint64_as_uint32(QEMUFile *f, void /
glue	helper_template.h	/^static int glue(compute_all_add, SUFFIX)(void)$/
glue	helper_template.h	/^static int glue(compute_c_add, SUFFIX)(void)$/
glue	helper_template.h	/^static int glue(compute_all_adc, SUFFIX)(void)$/
glue	helper_template.h	/^static int glue(compute_c_adc, SUFFIX)(void)$/
glue	helper_template.h	/^static int glue(compute_all_sub, SUFFIX)(void)$/
glue	helper_template.h	/^static int glue(compute_c_sub, SUFFIX)(void)$/
glue	helper_template.h	/^static int glue(compute_all_sbb, SUFFIX)(void)$/
glue	helper_template.h	/^static int glue(compute_c_sbb, SUFFIX)(void)$/
glue	helper_template.h	/^static int glue(compute_all_logic, SUFFIX)(void)$/
glue	helper_template.h	/^static int glue(compute_c_logic, SUFFIX)(void)$/
glue	helper_template.h	/^static int glue(compute_all_inc, SUFFIX)(void)$/
glue	helper_template.h	/^static int glue(compute_c_inc, SUFFIX)(void)$/
glue	helper_template.h	/^static int glue(compute_all_dec, SUFFIX)(void)$/
glue	helper_template.h	/^static int glue(compute_all_shl, SUFFIX)(void)$/
glue	helper_template.h	/^static int glue(compute_c_shl, SUFFIX)(void)$/
glue	helper_template.h	/^static int glue(compute_c_sar, SUFFIX)(void)$/
glue	helper_template.h	/^static int glue(compute_all_sar, SUFFIX)(void)$/
glue	helper_template.h	/^static int glue(compute_c_mul, SUFFIX)(void)$/
glue	helper_template.h	/^static int glue(compute_all_mul, SUFFIX)(void)$/
glue	helper_template.h	/^target_ulong glue(helper_rcl, SUFFIX)(target_ulong/
glue	helper_template.h	/^target_ulong glue(helper_rcr, SUFFIX)(target_ulong/
glue	ops_sse.h	/^void glue(helper_psrlw, SUFFIX)(Reg *d, Reg *s)$/
glue	ops_sse.h	/^void glue(helper_psraw, SUFFIX)(Reg *d, Reg *s)$/
glue	ops_sse.h	/^void glue(helper_psllw, SUFFIX)(Reg *d, Reg *s)$/
glue	ops_sse.h	/^void glue(helper_psrld, SUFFIX)(Reg *d, Reg *s)$/
glue	ops_sse.h	/^void glue(helper_psrad, SUFFIX)(Reg *d, Reg *s)$/
glue	ops_sse.h	/^void glue(helper_pslld, SUFFIX)(Reg *d, Reg *s)$/
glue	ops_sse.h	/^void glue(helper_psrlq, SUFFIX)(Reg *d, Reg *s)$/
glue	ops_sse.h	/^void glue(helper_psllq, SUFFIX)(Reg *d, Reg *s)$/
glue	ops_sse.h	/^void glue(helper_psrldq, SUFFIX)(Reg *d, Reg *s)$/
glue	ops_sse.h	/^void glue(helper_pslldq, SUFFIX)(Reg *d, Reg *s)$/
glue	ops_sse.h	/^void glue(helper_pmaddwd, SUFFIX) (Reg *d, Reg *s)/
glue	ops_sse.h	/^void glue(helper_psadbw, SUFFIX) (Reg *d, Reg *s)$/
glue	ops_sse.h	/^void glue(helper_maskmov, SUFFIX) (Reg *d, Reg *s,/
glue	ops_sse.h	/^void glue(helper_movl_mm_T0, SUFFIX) (Reg *d, uint/
glue	ops_sse.h	/^void glue(helper_movq_mm_T0, SUFFIX) (Reg *d, uint/
glue	ops_sse.h	/^void glue(helper_pshufw, SUFFIX) (Reg *d, Reg *s, /
glue	ops_sse.h	/^void glue(helper_pshufd, SUFFIX) (Reg *d, Reg *s, /
glue	ops_sse.h	/^void glue(helper_pshuflw, SUFFIX) (Reg *d, Reg *s,/
glue	ops_sse.h	/^void glue(helper_pshufhw, SUFFIX) (Reg *d, Reg *s,/
glue	ops_sse.h	/^uint32_t glue(helper_pmovmskb, SUFFIX)(Reg *s)$/
glue	ops_sse.h	/^void glue(helper_packsswb, SUFFIX) (Reg *d, Reg *s/
glue	ops_sse.h	/^void glue(helper_packuswb, SUFFIX) (Reg *d, Reg *s/
glue	ops_sse.h	/^void glue(helper_packssdw, SUFFIX) (Reg *d, Reg *s/
glue	ops_sse.h	/^void glue(helper_pshufb, SUFFIX) (Reg *d, Reg *s)$/
glue	ops_sse.h	/^void glue(helper_phaddw, SUFFIX) (Reg *d, Reg *s)$/
glue	ops_sse.h	/^void glue(helper_phaddd, SUFFIX) (Reg *d, Reg *s)$/
glue	ops_sse.h	/^void glue(helper_phaddsw, SUFFIX) (Reg *d, Reg *s)/
glue	ops_sse.h	/^void glue(helper_pmaddubsw, SUFFIX) (Reg *d, Reg */
glue	ops_sse.h	/^void glue(helper_phsubw, SUFFIX) (Reg *d, Reg *s)$/
glue	ops_sse.h	/^void glue(helper_phsubd, SUFFIX) (Reg *d, Reg *s)$/
glue	ops_sse.h	/^void glue(helper_phsubsw, SUFFIX) (Reg *d, Reg *s)/
glue	ops_sse.h	/^void glue(helper_roundps, SUFFIX) (Reg *d, Reg *s,/
glue	ops_sse.h	/^void glue(helper_roundpd, SUFFIX) (Reg *d, Reg *s,/
glue	ops_sse.h	/^void glue(helper_roundss, SUFFIX) (Reg *d, Reg *s,/
glue	ops_sse.h	/^void glue(helper_roundsd, SUFFIX) (Reg *d, Reg *s,/
glue	ops_sse.h	/^void glue(helper_dppd, SUFFIX) (Reg *d, Reg *s, ui/
glue	ops_sse.h	/^void glue(helper_mpsadbw, SUFFIX) (Reg *d, Reg *s,/
glue	ops_sse.h	/^void glue(helper_pcmpestri, SUFFIX) (Reg *d, Reg */
glue	ops_sse.h	/^void glue(helper_pcmpestrm, SUFFIX) (Reg *d, Reg */
glue	ops_sse.h	/^void glue(helper_pcmpistri, SUFFIX) (Reg *d, Reg */
glue	ops_sse.h	/^void glue(helper_pcmpistrm, SUFFIX) (Reg *d, Reg */
handleProcessEvent	PyQEMU.py	/^	def handleProcessEvent(self, obj, process):$/
handleQemuEvent	PyQEMU.py	/^	def handleQemuEvent(self, ev, *args):$/
handle_even_inj	op_helper.c	/^static void handle_even_inj(int intno, int is_int,/
helper_aaa	op_helper.c	/^void helper_aaa(void)$/
helper_aad	op_helper.c	/^void helper_aad(int base)$/
helper_aam	op_helper.c	/^void helper_aam(int base)$/
helper_aas	op_helper.c	/^void helper_aas(void)$/
helper_addsubpd	ops_sse.h	/^void helper_addsubpd(XMMReg *d, XMMReg *s)$/
helper_addsubps	ops_sse.h	/^void helper_addsubps(XMMReg *d, XMMReg *s)$/
helper_boundl	op_helper.c	/^void helper_boundl(target_ulong a0, int v)$/
helper_boundw	op_helper.c	/^void helper_boundw(target_ulong a0, int v)$/
helper_bsf	op_helper.c	/^target_ulong helper_bsf(target_ulong t0)$/
helper_bsr	op_helper.c	/^target_ulong helper_bsr(target_ulong t0)$/
helper_call_protected0	op_helper.c	/^void helper_call_protected0(void)$/
helper_call_protected1	op_helper.c	/^void helper_call_protected1(target_ulong new_eip)$/
helper_cc_compute_all	op_helper.c	/^uint32_t helper_cc_compute_all(int op)$/
helper_cc_compute_c	op_helper.c	/^uint32_t helper_cc_compute_c(int op)$/
helper_check_iob	op_helper.c	/^void helper_check_iob(uint32_t t0)$/
helper_check_iol	op_helper.c	/^void helper_check_iol(uint32_t t0)$/
helper_check_iow	op_helper.c	/^void helper_check_iow(uint32_t t0)$/
helper_clgi	op_helper.c	/^void helper_clgi(void)$/
helper_clgi	op_helper.c	/^void helper_clgi(void)$/
helper_cli	op_helper.c	/^void helper_cli(void)$/
helper_cli_vm	op_helper.c	/^void helper_cli_vm(void)$/
helper_clts	op_helper.c	/^void helper_clts(void)$/
helper_cmpxchg16b	op_helper.c	/^void helper_cmpxchg16b(target_ulong a0)$/
helper_cmpxchg8b	op_helper.c	/^void helper_cmpxchg8b(target_ulong a0)$/
helper_comisd	ops_sse.h	/^void helper_comisd(Reg *d, Reg *s)$/
helper_comiss	ops_sse.h	/^void helper_comiss(Reg *d, Reg *s)$/
helper_cpuid	op_helper.c	/^void helper_cpuid(void)$/
helper_crc32	ops_sse.h	/^target_ulong helper_crc32(uint32_t crc1, target_ul/
helper_cvtdq2pd	ops_sse.h	/^void helper_cvtdq2pd(Reg *d, Reg *s)$/
helper_cvtdq2ps	ops_sse.h	/^void helper_cvtdq2ps(Reg *d, Reg *s)$/
helper_cvtpd2dq	ops_sse.h	/^void helper_cvtpd2dq(XMMReg *d, XMMReg *s)$/
helper_cvtpd2pi	ops_sse.h	/^void helper_cvtpd2pi(MMXReg *d, XMMReg *s)$/
helper_cvtpd2ps	ops_sse.h	/^void helper_cvtpd2ps(Reg *d, Reg *s)$/
helper_cvtpi2pd	ops_sse.h	/^void helper_cvtpi2pd(XMMReg *d, MMXReg *s)$/
helper_cvtpi2ps	ops_sse.h	/^void helper_cvtpi2ps(XMMReg *d, MMXReg *s)$/
helper_cvtps2dq	ops_sse.h	/^void helper_cvtps2dq(XMMReg *d, XMMReg *s)$/
helper_cvtps2pi	ops_sse.h	/^void helper_cvtps2pi(MMXReg *d, XMMReg *s)$/
helper_cvtsd2si	ops_sse.h	/^int32_t helper_cvtsd2si(XMMReg *s)$/
helper_cvtsd2sq	ops_sse.h	/^int64_t helper_cvtsd2sq(XMMReg *s)$/
helper_cvtsd2ss	ops_sse.h	/^void helper_cvtsd2ss(Reg *d, Reg *s)$/
helper_cvtsi2sd	ops_sse.h	/^void helper_cvtsi2sd(XMMReg *d, uint32_t val)$/
helper_cvtsi2ss	ops_sse.h	/^void helper_cvtsi2ss(XMMReg *d, uint32_t val)$/
helper_cvtsq2sd	ops_sse.h	/^void helper_cvtsq2sd(XMMReg *d, uint64_t val)$/
helper_cvtsq2ss	ops_sse.h	/^void helper_cvtsq2ss(XMMReg *d, uint64_t val)$/
helper_cvtss2sd	ops_sse.h	/^void helper_cvtss2sd(Reg *d, Reg *s)$/
helper_cvtss2si	ops_sse.h	/^int32_t helper_cvtss2si(XMMReg *s)$/
helper_cvtss2sq	ops_sse.h	/^int64_t helper_cvtss2sq(XMMReg *s)$/
helper_cvttpd2dq	ops_sse.h	/^void helper_cvttpd2dq(XMMReg *d, XMMReg *s)$/
helper_cvttpd2pi	ops_sse.h	/^void helper_cvttpd2pi(MMXReg *d, XMMReg *s)$/
helper_cvttps2dq	ops_sse.h	/^void helper_cvttps2dq(XMMReg *d, XMMReg *s)$/
helper_cvttps2pi	ops_sse.h	/^void helper_cvttps2pi(MMXReg *d, XMMReg *s)$/
helper_cvttsd2si	ops_sse.h	/^int32_t helper_cvttsd2si(XMMReg *s)$/
helper_cvttsd2sq	ops_sse.h	/^int64_t helper_cvttsd2sq(XMMReg *s)$/
helper_cvttss2si	ops_sse.h	/^int32_t helper_cvttss2si(XMMReg *s)$/
helper_cvttss2sq	ops_sse.h	/^int64_t helper_cvttss2sq(XMMReg *s)$/
helper_daa	op_helper.c	/^void helper_daa(void)$/
helper_das	op_helper.c	/^void helper_das(void)$/
helper_debug	op_helper.c	/^void helper_debug(void)$/
helper_divb_AL	op_helper.c	/^void helper_divb_AL(target_ulong t0)$/
helper_divl_EAX	op_helper.c	/^void helper_divl_EAX(target_ulong t0)$/
helper_divq_EAX	op_helper.c	/^void helper_divq_EAX(target_ulong t0)$/
helper_divw_AX	op_helper.c	/^void helper_divw_AX(target_ulong t0)$/
helper_emms	op_helper.c	/^void helper_emms(void)$/
helper_enter64_level	op_helper.c	/^void helper_enter64_level(int level, int data64, t/
helper_enter_level	op_helper.c	/^void helper_enter_level(int level, int data32, tar/
helper_enter_mmx	op_helper.c	/^void helper_enter_mmx(void)$/
helper_extrq	ops_sse.h	/^static inline uint64_t helper_extrq(uint64_t src, /
helper_extrq_i	ops_sse.h	/^void helper_extrq_i(XMMReg *d, int index, int leng/
helper_extrq_r	ops_sse.h	/^void helper_extrq_r(XMMReg *d, XMMReg *s)$/
helper_f2xm1	op_helper.c	/^void helper_f2xm1(void)$/
helper_fabs_ST0	op_helper.c	/^void helper_fabs_ST0(void)$/
helper_fadd_ST0_FT0	op_helper.c	/^void helper_fadd_ST0_FT0(void)$/
helper_fadd_STN_ST0	op_helper.c	/^void helper_fadd_STN_ST0(int st_index)$/
helper_fbld_ST0	op_helper.c	/^void helper_fbld_ST0(target_ulong ptr)$/
helper_fbst_ST0	op_helper.c	/^void helper_fbst_ST0(target_ulong ptr)$/
helper_fchs_ST0	op_helper.c	/^void helper_fchs_ST0(void)$/
helper_fclex	op_helper.c	/^void helper_fclex(void)$/
helper_fcom_ST0_FT0	op_helper.c	/^void helper_fcom_ST0_FT0(void)$/
helper_fcomi_ST0_FT0	op_helper.c	/^void helper_fcomi_ST0_FT0(void)$/
helper_fcos	op_helper.c	/^void helper_fcos(void)$/
helper_fdecstp	op_helper.c	/^void helper_fdecstp(void)$/
helper_fdiv	op_helper.c	/^static inline CPU86_LDouble helper_fdiv(CPU86_LDou/
helper_fdiv_ST0_FT0	op_helper.c	/^void helper_fdiv_ST0_FT0(void)$/
helper_fdiv_STN_ST0	op_helper.c	/^void helper_fdiv_STN_ST0(int st_index)$/
helper_fdivr_ST0_FT0	op_helper.c	/^void helper_fdivr_ST0_FT0(void)$/
helper_fdivr_STN_ST0	op_helper.c	/^void helper_fdivr_STN_ST0(int st_index)$/
helper_ffree_STN	op_helper.c	/^void helper_ffree_STN(int st_index)$/
helper_fildl_FT0	op_helper.c	/^void helper_fildl_FT0(int32_t val)$/
helper_fildl_ST0	op_helper.c	/^void helper_fildl_ST0(int32_t val)$/
helper_fildll_ST0	op_helper.c	/^void helper_fildll_ST0(int64_t val)$/
helper_fincstp	op_helper.c	/^void helper_fincstp(void)$/
helper_fist_ST0	op_helper.c	/^int32_t helper_fist_ST0(void)$/
helper_fistl_ST0	op_helper.c	/^int32_t helper_fistl_ST0(void)$/
helper_fistll_ST0	op_helper.c	/^int64_t helper_fistll_ST0(void)$/
helper_fistt_ST0	op_helper.c	/^int32_t helper_fistt_ST0(void)$/
helper_fisttl_ST0	op_helper.c	/^int32_t helper_fisttl_ST0(void)$/
helper_fisttll_ST0	op_helper.c	/^int64_t helper_fisttll_ST0(void)$/
helper_fld1_ST0	op_helper.c	/^void helper_fld1_ST0(void)$/
helper_fldcw	op_helper.c	/^void helper_fldcw(uint32_t val)$/
helper_fldenv	op_helper.c	/^void helper_fldenv(target_ulong ptr, int data32)$/
helper_fldl2e_ST0	op_helper.c	/^void helper_fldl2e_ST0(void)$/
helper_fldl2t_ST0	op_helper.c	/^void helper_fldl2t_ST0(void)$/
helper_fldl_FT0	op_helper.c	/^void helper_fldl_FT0(uint64_t val)$/
helper_fldl_ST0	op_helper.c	/^void helper_fldl_ST0(uint64_t val)$/
helper_fldlg2_ST0	op_helper.c	/^void helper_fldlg2_ST0(void)$/
helper_fldln2_ST0	op_helper.c	/^void helper_fldln2_ST0(void)$/
helper_fldpi_ST0	op_helper.c	/^void helper_fldpi_ST0(void)$/
helper_flds_FT0	op_helper.c	/^void helper_flds_FT0(uint32_t val)$/
helper_flds_ST0	op_helper.c	/^void helper_flds_ST0(uint32_t val)$/
helper_fldt	exec.h	/^static inline CPU86_LDouble helper_fldt(target_ulo/
helper_fldt	exec.h	/^static inline CPU86_LDouble helper_fldt(target_ulo/
helper_fldt_ST0	op_helper.c	/^void helper_fldt_ST0(target_ulong ptr)$/
helper_fldz_FT0	op_helper.c	/^void helper_fldz_FT0(void)$/
helper_fldz_ST0	op_helper.c	/^void helper_fldz_ST0(void)$/
helper_flx_bblstart	op_helper.c	/^void helper_flx_bblstart(target_ulong eip){$/
helper_flx_call	op_helper.c	/^void helper_flx_call(target_ulong src_eip, target_/
helper_flx_debug	op_helper.c	/^void helper_flx_debug(void)$/
helper_flx_jmp	op_helper.c	/^void helper_flx_jmp(target_ulong src_eip, target_u/
helper_flx_memtrace_read	op_helper.c	/^void helper_flx_memtrace_read(uint64_t value, uint/
helper_flx_memtrace_write	op_helper.c	/^void helper_flx_memtrace_write(uint64_t value, uin/
helper_flx_ret	op_helper.c	/^void helper_flx_ret(target_ulong new_eip){$/
helper_flx_syscall	op_helper.c	/^void helper_flx_syscall(void){$/
helper_fmov_FT0_STN	op_helper.c	/^void helper_fmov_FT0_STN(int st_index)$/
helper_fmov_ST0_FT0	op_helper.c	/^void helper_fmov_ST0_FT0(void)$/
helper_fmov_ST0_STN	op_helper.c	/^void helper_fmov_ST0_STN(int st_index)$/
helper_fmov_STN_ST0	op_helper.c	/^void helper_fmov_STN_ST0(int st_index)$/
helper_fmul_ST0_FT0	op_helper.c	/^void helper_fmul_ST0_FT0(void)$/
helper_fmul_STN_ST0	op_helper.c	/^void helper_fmul_STN_ST0(int st_index)$/
helper_fninit	op_helper.c	/^void helper_fninit(void)$/
helper_fnstcw	op_helper.c	/^uint32_t helper_fnstcw(void)$/
helper_fnstsw	op_helper.c	/^uint32_t helper_fnstsw(void)$/
helper_fpatan	op_helper.c	/^void helper_fpatan(void)$/
helper_fpop	op_helper.c	/^void helper_fpop(void)$/
helper_fprem	op_helper.c	/^void helper_fprem(void)$/
helper_fprem1	op_helper.c	/^void helper_fprem1(void)$/
helper_fptan	op_helper.c	/^void helper_fptan(void)$/
helper_fpush	op_helper.c	/^void helper_fpush(void)$/
helper_frndint	op_helper.c	/^void helper_frndint(void)$/
helper_frstor	op_helper.c	/^void helper_frstor(target_ulong ptr, int data32)$/
helper_fsave	op_helper.c	/^void helper_fsave(target_ulong ptr, int data32)$/
helper_fscale	op_helper.c	/^void helper_fscale(void)$/
helper_fsin	op_helper.c	/^void helper_fsin(void)$/
helper_fsincos	op_helper.c	/^void helper_fsincos(void)$/
helper_fsqrt	op_helper.c	/^void helper_fsqrt(void)$/
helper_fstenv	op_helper.c	/^void helper_fstenv(target_ulong ptr, int data32)$/
helper_fstl_ST0	op_helper.c	/^uint64_t helper_fstl_ST0(void)$/
helper_fsts_ST0	op_helper.c	/^uint32_t helper_fsts_ST0(void)$/
helper_fstt	exec.h	/^static inline void helper_fstt(CPU86_LDouble f, ta/
helper_fstt	exec.h	/^static inline void helper_fstt(CPU86_LDouble f, ta/
helper_fstt_ST0	op_helper.c	/^void helper_fstt_ST0(target_ulong ptr)$/
helper_fsub_ST0_FT0	op_helper.c	/^void helper_fsub_ST0_FT0(void)$/
helper_fsub_STN_ST0	op_helper.c	/^void helper_fsub_STN_ST0(int st_index)$/
helper_fsubr_ST0_FT0	op_helper.c	/^void helper_fsubr_ST0_FT0(void)$/
helper_fsubr_STN_ST0	op_helper.c	/^void helper_fsubr_STN_ST0(int st_index)$/
helper_fucom_ST0_FT0	op_helper.c	/^void helper_fucom_ST0_FT0(void)$/
helper_fucomi_ST0_FT0	op_helper.c	/^void helper_fucomi_ST0_FT0(void)$/
helper_fwait	op_helper.c	/^void helper_fwait(void)$/
helper_fxam_ST0	op_helper.c	/^void helper_fxam_ST0(void)$/
helper_fxchg_ST0_STN	op_helper.c	/^void helper_fxchg_ST0_STN(int st_index)$/
helper_fxrstor	op_helper.c	/^void helper_fxrstor(target_ulong ptr, int data64)$/
helper_fxsave	op_helper.c	/^void helper_fxsave(target_ulong ptr, int data64)$/
helper_fxtract	op_helper.c	/^void helper_fxtract(void)$/
helper_fyl2x	op_helper.c	/^void helper_fyl2x(void)$/
helper_fyl2xp1	op_helper.c	/^void helper_fyl2xp1(void)$/
helper_haddpd	ops_sse.h	/^void helper_haddpd(XMMReg *d, XMMReg *s)$/
helper_haddps	ops_sse.h	/^void helper_haddps(XMMReg *d, XMMReg *s)$/
helper_hlt	op_helper.c	/^void helper_hlt(int next_eip_addend)$/
helper_hsubpd	ops_sse.h	/^void helper_hsubpd(XMMReg *d, XMMReg *s)$/
helper_hsubps	ops_sse.h	/^void helper_hsubps(XMMReg *d, XMMReg *s)$/
helper_idivb_AL	op_helper.c	/^void helper_idivb_AL(target_ulong t0)$/
helper_idivl_EAX	op_helper.c	/^void helper_idivl_EAX(target_ulong t0)$/
helper_idivq_EAX	op_helper.c	/^void helper_idivq_EAX(target_ulong t0)$/
helper_idivw_AX	op_helper.c	/^void helper_idivw_AX(target_ulong t0)$/
helper_imulq_EAX_T0	op_helper.c	/^void helper_imulq_EAX_T0(target_ulong t0)$/
helper_imulq_T0_T1	op_helper.c	/^target_ulong helper_imulq_T0_T1(target_ulong t0, t/
helper_inb	op_helper.c	/^target_ulong helper_inb(uint32_t port)$/
helper_inl	op_helper.c	/^target_ulong helper_inl(uint32_t port)$/
helper_insertq	ops_sse.h	/^static inline uint64_t helper_insertq(uint64_t src/
helper_insertq_i	ops_sse.h	/^void helper_insertq_i(XMMReg *d, int index, int le/
helper_insertq_r	ops_sse.h	/^void helper_insertq_r(XMMReg *d, XMMReg *s)$/
helper_into	op_helper.c	/^void helper_into(int next_eip_addend)$/
helper_invlpg	op_helper.c	/^void helper_invlpg(target_ulong addr)$/
helper_invlpga	op_helper.c	/^void helper_invlpga(int aflag)$/
helper_invlpga	op_helper.c	/^void helper_invlpga(int aflag)$/
helper_inw	op_helper.c	/^target_ulong helper_inw(uint32_t port)$/
helper_iret_protected	op_helper.c	/^void helper_iret_protected(int shift, int next_eip/
helper_iret_real	op_helper.c	/^void helper_iret_real(int shift)$/
helper_lar	op_helper.c	/^target_ulong helper_lar(target_ulong selector1)$/
helper_lcall_protected	op_helper.c	/^void helper_lcall_protected(int new_cs, target_ulo/
helper_lcall_real	op_helper.c	/^void helper_lcall_real(int new_cs, target_ulong ne/
helper_ljmp_protected	op_helper.c	/^void helper_ljmp_protected(int new_cs, target_ulon/
helper_lldt	op_helper.c	/^void helper_lldt(int selector)$/
helper_lmsw	op_helper.c	/^void helper_lmsw(target_ulong t0)$/
helper_load_seg	op_helper.c	/^void helper_load_seg(int seg_reg, int selector)$/
helper_lock	op_helper.c	/^void helper_lock(void)$/
helper_lret_protected	op_helper.c	/^void helper_lret_protected(int shift, int addend)$/
helper_lsl	op_helper.c	/^target_ulong helper_lsl(target_ulong selector1)$/
helper_ltr	op_helper.c	/^void helper_ltr(int selector)$/
helper_lzcnt	op_helper.c	/^target_ulong helper_lzcnt(target_ulong t0, int wor/
helper_monitor	op_helper.c	/^void helper_monitor(target_ulong ptr)$/
helper_movl_drN_T0	op_helper.c	/^void helper_movl_drN_T0(int reg, target_ulong t0)$/
helper_movl_drN_T0	op_helper.c	/^void helper_movl_drN_T0(int reg, target_ulong t0)$/
helper_movmskpd	ops_sse.h	/^uint32_t helper_movmskpd(Reg *s)$/
helper_movmskps	ops_sse.h	/^uint32_t helper_movmskps(Reg *s)$/
helper_movq	op_helper.c	/^void helper_movq(void *d, void *s)$/
helper_mulq_EAX_T0	op_helper.c	/^void helper_mulq_EAX_T0(target_ulong t0)$/
helper_mwait	op_helper.c	/^void helper_mwait(int next_eip_addend)$/
helper_outb	op_helper.c	/^void helper_outb(uint32_t port, uint32_t data)$/
helper_outl	op_helper.c	/^void helper_outl(uint32_t port, uint32_t data)$/
helper_outw	op_helper.c	/^void helper_outw(uint32_t port, uint32_t data)$/
helper_pf2id	ops_sse.h	/^void helper_pf2id(MMXReg *d, MMXReg *s)$/
helper_pf2iw	ops_sse.h	/^void helper_pf2iw(MMXReg *d, MMXReg *s)$/
helper_pfacc	ops_sse.h	/^void helper_pfacc(MMXReg *d, MMXReg *s)$/
helper_pfadd	ops_sse.h	/^void helper_pfadd(MMXReg *d, MMXReg *s)$/
helper_pfcmpeq	ops_sse.h	/^void helper_pfcmpeq(MMXReg *d, MMXReg *s)$/
helper_pfcmpge	ops_sse.h	/^void helper_pfcmpge(MMXReg *d, MMXReg *s)$/
helper_pfcmpgt	ops_sse.h	/^void helper_pfcmpgt(MMXReg *d, MMXReg *s)$/
helper_pfmax	ops_sse.h	/^void helper_pfmax(MMXReg *d, MMXReg *s)$/
helper_pfmin	ops_sse.h	/^void helper_pfmin(MMXReg *d, MMXReg *s)$/
helper_pfmul	ops_sse.h	/^void helper_pfmul(MMXReg *d, MMXReg *s)$/
helper_pfnacc	ops_sse.h	/^void helper_pfnacc(MMXReg *d, MMXReg *s)$/
helper_pfpnacc	ops_sse.h	/^void helper_pfpnacc(MMXReg *d, MMXReg *s)$/
helper_pfrcp	ops_sse.h	/^void helper_pfrcp(MMXReg *d, MMXReg *s)$/
helper_pfrsqrt	ops_sse.h	/^void helper_pfrsqrt(MMXReg *d, MMXReg *s)$/
helper_pfsub	ops_sse.h	/^void helper_pfsub(MMXReg *d, MMXReg *s)$/
helper_pfsubr	ops_sse.h	/^void helper_pfsubr(MMXReg *d, MMXReg *s)$/
helper_pi2fw	ops_sse.h	/^void helper_pi2fw(MMXReg *d, MMXReg *s)$/
helper_popcnt	ops_sse.h	/^target_ulong helper_popcnt(target_ulong n, uint32_/
helper_post_call_protected	op_helper.c	/^void helper_post_call_protected(target_ulong sub_e/
helper_pswapd	ops_sse.h	/^void helper_pswapd(MMXReg *d, MMXReg *s)$/
helper_raise_exception	op_helper.c	/^void helper_raise_exception(int exception_index)$/
helper_raise_interrupt	op_helper.c	/^void helper_raise_interrupt(int intno, int next_ei/
helper_rcpps	ops_sse.h	/^void helper_rcpps(XMMReg *d, XMMReg *s)$/
helper_rcpss	ops_sse.h	/^void helper_rcpss(XMMReg *d, XMMReg *s)$/
helper_rdmsr	op_helper.c	/^void helper_rdmsr(void)$/
helper_rdmsr	op_helper.c	/^void helper_rdmsr(void)$/
helper_rdpmc	op_helper.c	/^void helper_rdpmc(void)$/
helper_rdtsc	op_helper.c	/^void helper_rdtsc(void)$/
helper_rdtscp	op_helper.c	/^void helper_rdtscp(void)$/
helper_read_crN	op_helper.c	/^target_ulong helper_read_crN(int reg)$/
helper_read_crN	op_helper.c	/^target_ulong helper_read_crN(int reg)$/
helper_read_eflags	op_helper.c	/^target_ulong helper_read_eflags(void)$/
helper_reset_inhibit_irq	op_helper.c	/^void helper_reset_inhibit_irq(void)$/
helper_reset_rf	op_helper.c	/^void helper_reset_rf(void)$/
helper_ret_protected	op_helper.c	/^static inline void helper_ret_protected(int shift,/
helper_rsm	op_helper.c	/^void helper_rsm(void)$/
helper_rsm	op_helper.c	/^void helper_rsm(void)$/
helper_rsqrtps	ops_sse.h	/^void helper_rsqrtps(XMMReg *d, XMMReg *s)$/
helper_rsqrtss	ops_sse.h	/^void helper_rsqrtss(XMMReg *d, XMMReg *s)$/
helper_set_inhibit_irq	op_helper.c	/^void helper_set_inhibit_irq(void)$/
helper_shufpd	ops_sse.h	/^void helper_shufpd(Reg *d, Reg *s, int order)$/
helper_shufps	ops_sse.h	/^void helper_shufps(Reg *d, Reg *s, int order)$/
helper_single_step	op_helper.c	/^void helper_single_step(void)$/
helper_skinit	op_helper.c	/^void helper_skinit(void) $/
helper_skinit	op_helper.c	/^void helper_skinit(void)$/
helper_stgi	op_helper.c	/^void helper_stgi(void)$/
helper_stgi	op_helper.c	/^void helper_stgi(void)$/
helper_sti	op_helper.c	/^void helper_sti(void)$/
helper_sti_vm	op_helper.c	/^void helper_sti_vm(void)$/
helper_svm_check_intercept_param	op_helper.c	/^void helper_svm_check_intercept_param(uint32_t typ/
helper_svm_check_intercept_param	op_helper.c	/^void helper_svm_check_intercept_param(uint32_t typ/
helper_svm_check_io	op_helper.c	/^void helper_svm_check_io(uint32_t port, uint32_t p/
helper_svm_check_io	op_helper.c	/^void helper_svm_check_io(uint32_t port, uint32_t p/
helper_syscall	op_helper.c	/^void helper_syscall(int next_eip_addend)$/
helper_syscall	op_helper.c	/^void helper_syscall(int next_eip_addend)$/
helper_sysenter	op_helper.c	/^void helper_sysenter(void)$/
helper_sysexit	op_helper.c	/^void helper_sysexit(int dflag)$/
helper_sysret	op_helper.c	/^void helper_sysret(int dflag)$/
helper_ucomisd	ops_sse.h	/^void helper_ucomisd(Reg *d, Reg *s)$/
helper_ucomiss	ops_sse.h	/^void helper_ucomiss(Reg *d, Reg *s)$/
helper_unlock	op_helper.c	/^void helper_unlock(void)$/
helper_verr	op_helper.c	/^void helper_verr(target_ulong selector1)$/
helper_verw	op_helper.c	/^void helper_verw(target_ulong selector1)$/
helper_vmexit	op_helper.c	/^void helper_vmexit(uint32_t exit_code, uint64_t ex/
helper_vmexit	op_helper.c	/^void helper_vmexit(uint32_t exit_code, uint64_t ex/
helper_vmload	op_helper.c	/^void helper_vmload(int aflag)$/
helper_vmload	op_helper.c	/^void helper_vmload(int aflag)$/
helper_vmmcall	op_helper.c	/^void helper_vmmcall(void) $/
helper_vmmcall	op_helper.c	/^void helper_vmmcall(void)$/
helper_vmrun	op_helper.c	/^void helper_vmrun(int aflag, int next_eip_addend)$/
helper_vmrun	op_helper.c	/^void helper_vmrun(int aflag, int next_eip_addend)$/
helper_vmsave	op_helper.c	/^void helper_vmsave(int aflag)$/
helper_vmsave	op_helper.c	/^void helper_vmsave(int aflag)$/
helper_write_crN	op_helper.c	/^void helper_write_crN(int reg, target_ulong t0)$/
helper_write_crN	op_helper.c	/^void helper_write_crN(int reg, target_ulong t0)$/
helper_write_eflags	op_helper.c	/^void helper_write_eflags(target_ulong t0, uint32_t/
helper_wrmsr	op_helper.c	/^void helper_wrmsr(void)$/
helper_wrmsr	op_helper.c	/^void helper_wrmsr(void)$/
host_cpuid	cpuid.c	/^static void host_cpuid(uint32_t function, uint32_t/
hw_breakpoint_enabled	cpu.h	/^static inline int hw_breakpoint_enabled(unsigned l/
hw_breakpoint_insert	helper.c	/^void hw_breakpoint_insert(CPUState *env, int index/
hw_breakpoint_len	cpu.h	/^static inline int hw_breakpoint_len(unsigned long /
hw_breakpoint_remove	helper.c	/^void hw_breakpoint_remove(CPUState *env, int index/
hw_breakpoint_type	cpu.h	/^static inline int hw_breakpoint_type(unsigned long/
idiv64	op_helper.c	/^static int idiv64(uint64_t *plow, uint64_t *phigh,/
info	PyQEMU.py	/^	def info(self, message):$/
init	PyQEMU.py	/^def init(sval):	$/
initpyflxinstrument	flx_instrument.c	/^initpyflxinstrument(void)$/
insn_const_size	translate.c	/^static inline int insn_const_size(unsigned int ot)/
insn_get	translate.c	/^static inline uint32_t insn_get(DisasContext *s, i/
is_fast_jcc_case	translate.c	/^static int is_fast_jcc_case(DisasContext *s, int b/
is_used	flx_shadowmem.c	/^uint8_t is_used(shadowmem* mem, uint32_t address){/
iswhite	cpuid.c	/^#define iswhite(c) ((c) && ((c) <= ' ' || '~' < (c/
kernelspace	flx_instrument.h	/^#define kernelspace(x) (x&0x80000000)$/
kvm_arch_debug	kvm.c	/^int kvm_arch_debug(struct kvm_debug_exit_arch *arc/
kvm_arch_get_registers	kvm.c	/^int kvm_arch_get_registers(CPUState *env)$/
kvm_arch_get_supported_cpuid	kvm.c	/^uint32_t kvm_arch_get_supported_cpuid(CPUState *en/
kvm_arch_get_supported_cpuid	kvm.c	/^uint32_t kvm_arch_get_supported_cpuid(CPUState *en/
kvm_arch_handle_exit	kvm.c	/^int kvm_arch_handle_exit(CPUState *env, struct kvm/
kvm_arch_init	kvm.c	/^int kvm_arch_init(KVMState *s, int smp_cpus)$/
kvm_arch_init_vcpu	kvm.c	/^int kvm_arch_init_vcpu(CPUState *env)$/
kvm_arch_insert_hw_breakpoint	kvm.c	/^int kvm_arch_insert_hw_breakpoint(target_ulong add/
kvm_arch_insert_sw_breakpoint	kvm.c	/^int kvm_arch_insert_sw_breakpoint(CPUState *env, s/
kvm_arch_post_run	kvm.c	/^int kvm_arch_post_run(CPUState *env, struct kvm_ru/
kvm_arch_pre_run	kvm.c	/^int kvm_arch_pre_run(CPUState *env, struct kvm_run/
kvm_arch_process_irqchip_events	kvm.c	/^int kvm_arch_process_irqchip_events(CPUState *env)/
kvm_arch_put_registers	kvm.c	/^int kvm_arch_put_registers(CPUState *env, int leve/
kvm_arch_remove_all_hw_breakpoints	kvm.c	/^void kvm_arch_remove_all_hw_breakpoints(void)$/
kvm_arch_remove_hw_breakpoint	kvm.c	/^int kvm_arch_remove_hw_breakpoint(target_ulong add/
kvm_arch_remove_sw_breakpoint	kvm.c	/^int kvm_arch_remove_sw_breakpoint(CPUState *env, s/
kvm_arch_reset_vcpu	kvm.c	/^void kvm_arch_reset_vcpu(CPUState *env)$/
kvm_arch_stop_on_emulation_error	kvm.c	/^bool kvm_arch_stop_on_emulation_error(CPUState *en/
kvm_arch_update_guest_debug	kvm.c	/^void kvm_arch_update_guest_debug(CPUState *env, st/
kvm_get_debugregs	kvm.c	/^static int kvm_get_debugregs(CPUState *env)$/
kvm_get_fpu	kvm.c	/^static int kvm_get_fpu(CPUState *env)$/
kvm_get_mp_state	kvm.c	/^static int kvm_get_mp_state(CPUState *env)$/
kvm_get_msrs	kvm.c	/^static int kvm_get_msrs(CPUState *env)$/
kvm_get_sregs	kvm.c	/^static int kvm_get_sregs(CPUState *env)$/
kvm_get_vcpu_events	kvm.c	/^static int kvm_get_vcpu_events(CPUState *env)$/
kvm_get_xcrs	kvm.c	/^static int kvm_get_xcrs(CPUState *env)$/
kvm_get_xsave	kvm.c	/^static int kvm_get_xsave(CPUState *env)$/
kvm_getput_reg	kvm.c	/^static void kvm_getput_reg(__u64 *kvm_reg, target_/
kvm_getput_regs	kvm.c	/^static int kvm_getput_regs(CPUState *env, int set)/
kvm_guest_debug_workarounds	kvm.c	/^static int kvm_guest_debug_workarounds(CPUState *e/
kvm_handle_halt	kvm.c	/^static int kvm_handle_halt(CPUState *env)$/
kvm_has_msr_star	kvm.c	/^static int kvm_has_msr_star(CPUState *env)$/
kvm_init_identity_map_page	kvm.c	/^static int kvm_init_identity_map_page(KVMState *s)/
kvm_msr_entry_set	kvm.c	/^static void kvm_msr_entry_set(struct kvm_msr_entry/
kvm_put_debugregs	kvm.c	/^static int kvm_put_debugregs(CPUState *env)$/
kvm_put_fpu	kvm.c	/^static int kvm_put_fpu(CPUState *env)$/
kvm_put_mp_state	kvm.c	/^static int kvm_put_mp_state(CPUState *env)$/
kvm_put_msrs	kvm.c	/^static int kvm_put_msrs(CPUState *env, int level)$/
kvm_put_sregs	kvm.c	/^static int kvm_put_sregs(CPUState *env)$/
kvm_put_vcpu_events	kvm.c	/^static int kvm_put_vcpu_events(CPUState *env, int /
kvm_put_xcrs	kvm.c	/^static int kvm_put_xcrs(CPUState *env)$/
kvm_put_xsave	kvm.c	/^static int kvm_put_xsave(CPUState *env)$/
less_than_7	machine.c	/^static bool less_than_7(void *opaque, int version_/
listflags	cpuid.c	/^static void listflags(char *buf, int bufsize, uint/
loadConfiguration	PyQEMU.py	/^	def loadConfiguration(self, configfile):$/
load_eflags	exec.h	/^static inline void load_eflags(int eflags, int upd/
load_seg_cache_raw_dt	op_helper.c	/^static inline void load_seg_cache_raw_dt(SegmentCa/
load_seg_vm	op_helper.c	/^static inline void load_seg_vm(int seg, int select/
load_segment	op_helper.c	/^static inline int load_segment(uint32_t *e1_ptr, u/
lookup_feature	cpuid.c	/^static int lookup_feature(uint32_t *pval, const ch/
lshift	exec.h	/^static inline target_long lshift(target_long x, in/
mce_init	helper.c	/^static void mce_init(CPUX86State *cenv)$/
memory_byte_cmp	flx_memtrack.c	/^memory_byte_cmp(const memory_byte* b1, const memor/
memory_byte_free	flx_memtrack.c	/^memory_byte_free(memory_byte* byte){$/
neg128	op_helper.c	/^static void neg128(uint64_t *plow, uint64_t *phigh/
optimize_flags_init	translate.c	/^void optimize_flags_init(void)$/
pcmp_ilen	ops_sse.h	/^static inline int pcmp_ilen(Reg *r, uint8_t ctrl)$/
pcmp_val	ops_sse.h	/^static inline int pcmp_val(Reg *r, uint8_t ctrl, i/
pcmpxstrx	ops_sse.h	/^static inline unsigned pcmpxstrx(Reg *d, Reg *s,$/
put_fpreg	machine.c	/^static void put_fpreg(QEMUFile *f, void *opaque, s/
put_fpreg	machine.c	/^static void put_fpreg(QEMUFile *f, void *opaque, s/
put_fpreg_error	machine.c	/^static void put_fpreg_error(QEMUFile *f, void *opa/
put_uint64_as_uint32	machine.c	/^static void put_uint64_as_uint32(QEMUFile *f, void/
qebek_read_ulong	op_helper.c	/^int qebek_read_ulong(CPUX86State *env, target_ulon/
raise_exception	op_helper.c	/^void raise_exception(int exception_index)$/
raise_exception_env	op_helper.c	/^void raise_exception_env(int exception_index, CPUS/
raise_exception_err	op_helper.c	/^#define raise_exception_err(a, b)\\$/
raise_exception_err	op_helper.c	/^void raise_exception_err(int exception_index, int /
raise_interrupt	op_helper.c	/^static void QEMU_NORETURN raise_interrupt(int intn/
rffs1	ops_sse.h	/^static inline int rffs1(unsigned int val)$/
satsb	ops_sse.h	/^static inline int satsb(int x)$/
satsw	ops_sse.h	/^static inline int satsw(int x)$/
satub	ops_sse.h	/^static inline int satub(int x)$/
satuw	ops_sse.h	/^static inline int satuw(int x)$/
set_seg	kvm.c	/^static void set_seg(struct kvm_segment *lhs, const/
set_v8086_seg	kvm.c	/^static void set_v8086_seg(struct kvm_segment *lhs,/
setfeatures	cpuid.c	/^static void setfeatures(uint32_t *pval, const char/
setscalar	cpuid.c	/^#define setscalar(pval, str, perr)                /
shadowmem_inuse	flx_shadowmem.c	/^#define shadowmem_inuse(page, address) ((page->use/
shadowmem_page_cmp	flx_shadowmem.c	/^shadowmem_page_cmp(const shadow_page* p1, const sh/
shadowmem_page_free	flx_shadowmem.c	/^shadowmem_page_free(shadow_page* page){$/
shadowmem_setuse	flx_shadowmem.c	/^#define shadowmem_setuse(page, address) do { page-/
shutdown	PyQEMU.py	/^	def shutdown(self, process = None):$/
sstrcmp	cpuid.c	/^static int sstrcmp(const char *s1, const char *e1,/
svm_check_intercept	exec.h	/^static inline void svm_check_intercept(uint32_t ty/
svm_is_rep	translate.c	/^static inline int svm_is_rep(int prefixes)$/
svm_load_seg	op_helper.c	/^static inline void svm_load_seg(target_phys_addr_t/
svm_load_seg_cache	op_helper.c	/^static inline void svm_load_seg_cache(target_phys_/
svm_save_seg	op_helper.c	/^static inline void svm_save_seg(target_phys_addr_t/
switch_tss	op_helper.c	/^static void switch_tss(int tss_selector,$/
tcg_gen_lshift	translate.c	/^static inline void tcg_gen_lshift(TCGv ret, TCGv a/
tlb_fill	op_helper.c	/^void tlb_fill(target_ulong addr, int is_write, int/
try_get_cpuid	kvm.c	/^static struct kvm_cpuid2 *try_get_cpuid(KVMState */
tss_load_seg	op_helper.c	/^static void tss_load_seg(int seg_reg, int selector/
unavailable_host_feature	cpuid.c	/^static int unavailable_host_feature(struct model_f/
update_fp_status	op_helper.c	/^static void update_fp_status(void)$/
userspace	flx_instrument.h	/^#define userspace(x) (!(x&0x80000000))$/
validate_seg	op_helper.c	/^static inline void validate_seg(int seg_reg, int c/
version_is_5	machine.c	/^static bool version_is_5(void *opaque, int version/
warning	PyQEMU.py	/^	def warning(self, warning):$/
x86_cpu_list	cpuid.c	/^void x86_cpu_list (FILE *f, int (*cpu_fprintf)(FIL/
x86_cpudef_setup	cpuid.c	/^void x86_cpudef_setup(void)$/
